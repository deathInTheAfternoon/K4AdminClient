====== BEGIN FILE: ./App.xaml ======
﻿<Application x:Class="AdminClient.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:AdminClient"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:converters="clr-namespace:AdminClient.Converters"
             >

    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <materialDesign:BundledTheme BaseTheme="Light" PrimaryColor="DeepPurple" SecondaryColor="Lime" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesign3.Defaults.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
            <converters:NotNullToBooleanConverter x:Key="NotNullToBooleanConverter"/>
            <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        </ResourceDictionary>
    </Application.Resources>
</Application>

====== END FILE: ./App.xaml ======

====== BEGIN FILE: ./App.xaml.cs ======
﻿using System.Windows;
using System.Windows.Threading;  // This gives us access to Dispatcher
using AdminClient.Services;
using AdminClient.ViewModels;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

namespace AdminClient
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application
    {
        private readonly IHost _host;

        public App()
        {
            Syncfusion.Licensing.SyncfusionLicenseProvider.RegisterLicense("Ngo9BigBOggjHTQxAR8 / V1NMaF5cXmZCf1FpRmJGdld5fUVHYVZUTXxaS00DNHVRdkdnWH1cc3VXQ2ZcUkxxWEo =");

            _host = Host.CreateDefaultBuilder()
                .ConfigureAppConfiguration((context, builder) =>
                {
                    // Add appsettings.json
                    builder.AddJsonFile("appsettings.json", optional: false);

                    // Add appsettings.Development.json if it exists
                    builder.AddJsonFile($"appsettings.Development.json", optional: true);
                })
                .ConfigureServices((context, services) =>
                {
                    ConfigureServices(services, context.Configuration);
                })
                .Build();
        }

        // Dependency injection chain...
        private void ConfigureServices(IServiceCollection services, IConfiguration configuration)
        {
            // Register configuration - this is important!
            services.AddSingleton<IConfiguration>(configuration);

            // Register HttpClient factory
            services.AddHttpClient();

            // Register our ApiService
            services.AddSingleton<ApiService>();

            // Register ViewModels 
            services.AddSingleton<MainWindowViewModel>();

            // Register MainWindow which uses the MainWindowViewModel
            services.AddSingleton<MainWindow>();


            // Register Dispatcher
            services.AddSingleton(Dispatcher.CurrentDispatcher);
        }

        protected override async void OnStartup(StartupEventArgs e)
        {
            // First, we need to start our host which initializes all our services
            await _host.StartAsync();

            try
            {
                // Get the main window from the dependency injection container
                var mainWindow = _host.Services.GetRequiredService<MainWindow>();

                // Show the main window - this makes it visible to the user
                mainWindow.Show();

                // Set it as the application's main window
                MainWindow = mainWindow;
            }
            catch (Exception ex)
            {
                // Log any startup errors
                MessageBox.Show($"An error occurred during startup: {ex.Message}",
                               "Startup Error",
                               MessageBoxButton.OK,
                               MessageBoxImage.Error);

                // Shutdown the application if we can't start properly
                Shutdown(-1);
            }

            // Don't forget to call the base implementation
            base.OnStartup(e);
        }

        protected override async void OnExit(ExitEventArgs e)
        {
            using (_host)
            {
                await _host.StopAsync();
            }

            base.OnExit(e);
        }

        // Provide a static way to access services (useful for XAML)
        public static T GetService<T>()
            where T : class
        {
            if ((Current as App)?._host.Services.GetService(typeof(T)) is not T service)
            {
                throw new ArgumentException($"{typeof(T)} not found");
            }
            return service;
        }
    }

}

====== END FILE: ./App.xaml.cs ======

====== BEGIN FILE: ./AssemblyInfo.cs ======
using System.Windows;

[assembly: ThemeInfo(
    ResourceDictionaryLocation.None,            //where theme specific resource dictionaries are located
                                                //(used if a resource is not found in the page,
                                                // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly   //where the generic resource dictionary is located
                                                //(used if a resource is not found in the page,
                                                // app, or any theme specific resource dictionaries)
)]

====== END FILE: ./AssemblyInfo.cs ======

====== BEGIN FILE: ./Converters/ValueConverters.cs ======
﻿using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

namespace AdminClient.Converters
{
    public class NullToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return value == null ? Visibility.Collapsed : Visibility.Visible;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    public class NotNullToBooleanConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return value != null;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    public class BooleanToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return value is bool boolValue && boolValue ? Visibility.Visible : Visibility.Collapsed;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
====== END FILE: ./Converters/ValueConverters.cs ======

====== BEGIN FILE: ./Models/ApiModel.cs ======
﻿using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace AdminClient.Models
{
    // Base message content interface for type discrimination
    [JsonDerivedType(typeof(SubjectsListUpdate), typeDiscriminator: "SUBJECTS_LIST_UPDATE")]
    [JsonDerivedType(typeof(BundlesListUpdate), typeDiscriminator: "BUNDLES_LIST_UPDATE")]
    [JsonDerivedType(typeof(Assignment), typeDiscriminator: "ASSIGNMENT")]
    [JsonDerivedType(typeof(BatchAssignment), typeDiscriminator: "BATCH_ASSIGNMENT")]
    public interface IMessageContent { }

    public class Region
    {
        [JsonPropertyName("id")]
        public string Id { get; set; } = "US";

        [JsonPropertyName("organizations")]
        public List<Organization> Organizations { get; set; } = new();
    }

    public class Organization
    {
        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("programs")]
        public List<Program> Programs { get; set; } = new();
    }

    public class Program
    {
        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("organization")]
        public Organization Organization { get; set; }

        [JsonPropertyName("operatingUnits")]
        public List<OperatingUnit> OperatingUnits { get; set; } = new();
    }

    public class User
    {
        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("email")]
        public string Email { get; set; }

        [JsonPropertyName("role")]
        public UserRole Role { get; set; }

        [JsonPropertyName("organization")]
        public Organization Organization { get; set; }
    }

    public enum UserRole
    {
        ORGANIZATION_ADMIN,
        PROGRAM_ADMIN,
        OPERATING_UNIT_ADMIN,
        HCP,
        SUBJECT
    }

    public class OperatingUnit
    {
        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("program")]
        public Program Program { get; set; }

        // Note: HCPs and Subjects are marked JsonIgnore in Java, so we don't include them here
    }

    public class ActivityDefinition
    {
        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("instructions")]
        public string Instructions { get; set; }

        [JsonPropertyName("hcpOperated")]
        public bool HcpOperated { get; set; }

        [JsonPropertyName("program")]
        public Program Program { get; set; }
    }

    public class BundleDefinition
    {
        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("status")]
        public BundleStatus Status { get; set; } = BundleStatus.DRAFT;

        [JsonPropertyName("program")]
        public Program Program { get; set; }

        [JsonPropertyName("activities")]
        public List<ActivityDefinition> Activities { get; set; } = new();
    }

    public enum BundleStatus
    {
        DRAFT,
        APPROVED
    }

    // Message-related DTOs
    public class SubjectsListUpdate : IMessageContent
    {
        [JsonPropertyName("subjectIds")]
        public List<long> SubjectIds { get; set; } = new();
    }

    public class BundlesListUpdate : IMessageContent
    {
        [JsonPropertyName("bundleIds")]
        public List<long> BundleIds { get; set; } = new();
    }

    public class Assignment : IMessageContent
    {
        [JsonPropertyName("subjectId")]
        public long SubjectId { get; set; }

        [JsonPropertyName("bundleIds")]
        public List<long> BundleIds { get; set; } = new();
    }

    public class BatchAssignment : IMessageContent
    {
        [JsonPropertyName("subjectIds")]
        public List<long> SubjectIds { get; set; } = new();

        [JsonPropertyName("bundleIds")]
        public List<long> BundleIds { get; set; } = new();
    }

    public abstract class Message
    {
        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("fromOperatingUnit")]
        public OperatingUnit FromOperatingUnit { get; set; }

        [JsonPropertyName("content")]
        public string Content { get; set; }

        [JsonPropertyName("processed")]
        public bool Processed { get; set; }
    }

    public class HcpMessage : Message
    {
        // Inherits all properties from Message
    }

    public class SubjectMessage : Message
    {
        [JsonPropertyName("destinationSubject")]
        public User DestinationSubject { get; set; }
    }

    public class PersonalQueue
    {
        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("user")]
        public User User { get; set; }

        [JsonPropertyName("messages")]
        public List<Message> Messages { get; set; } = new();
    }
}

====== END FILE: ./Models/ApiModel.cs ======

====== BEGIN FILE: ./Services/ApiService.cs ======
﻿using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading.Tasks;
using AdminClient.Models;
using Microsoft.Extensions.Configuration;

namespace AdminClient.Services
{
    /// <summary>
    /// Service for handling all REST API communications with the backend.
    /// Uses HttpClient to make REST calls and handles serialization/deserialization of DTOs.
    /// </summary>
    public class ApiService : IDisposable
    {
        private readonly HttpClient _httpClient;
        private readonly string _baseUrl;
        private bool _disposed;

        public ApiService(IConfiguration configuration)
        {
            _baseUrl = configuration["ApiSettings:BaseUrl"] ?? "http://localhost:8080";
            _httpClient = new HttpClient
            {
                BaseAddress = new Uri(_baseUrl)
            };
        }

        // Region Operations
        public async Task<Region> GetRegionAsync(string regionId)
        {
            return await _httpClient.GetFromJsonAsync<Region>($"/regions/{regionId}")
                ?? throw new Exception("Region not found");
        }

        public async Task<List<Organization>> GetOrganizationsForRegionAsync(string regionId)
        {
            return await _httpClient.GetFromJsonAsync<List<Organization>>($"/regions/{regionId}/organizations")
                ?? new List<Organization>();
        }

        public async Task<Organization> CreateOrganizationAsync(string regionId, Organization org)
        {
            var response = await _httpClient.PostAsJsonAsync($"/regions/{regionId}/organizations", org);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<Organization>()
                ?? throw new Exception("Failed to create organization");
        }

        // Organization Operations
        public async Task<Organization> GetOrganizationAsync(long orgId)
        {
            return await _httpClient.GetFromJsonAsync<Organization>($"/organizations/{orgId}")
                ?? throw new Exception("Organization not found");
        }

        public async Task<List<Program>> GetProgramsForOrganizationAsync(long orgId)
        {
            return await _httpClient.GetFromJsonAsync<List<Program>>($"/organizations/{orgId}/programs")
                ?? new List<Program>();
        }

        public async Task<Program> CreateProgramAsync(long orgId, Program program)
        {
            var response = await _httpClient.PostAsJsonAsync($"/organizations/{orgId}/programs", program);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<Program>()
                ?? throw new Exception("Failed to create program");
        }

        // Program Operations
        public async Task<Program> GetProgramAsync(long programId)
        {
            return await _httpClient.GetFromJsonAsync<Program>($"/programs/{programId}")
                ?? throw new Exception("Program not found");
        }

        public async Task<List<OperatingUnit>> GetOperatingUnitsForProgramAsync(long programId)
        {
            return await _httpClient.GetFromJsonAsync<List<OperatingUnit>>($"/programs/{programId}/operating-units")
                ?? new List<OperatingUnit>();
        }

        public async Task<OperatingUnit> CreateOperatingUnitAsync(long programId, OperatingUnit ou)
        {
            var response = await _httpClient.PostAsJsonAsync($"/programs/{programId}/operating-units", ou);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<OperatingUnit>()
                ?? throw new Exception("Failed to create operating unit");
        }

        // Bundle and Activity Operations
        public async Task<List<BundleDefinition>> GetBundleDefinitionsForProgramAsync(long programId)
        {
            var response = await _httpClient.GetAsync($"/programs/{programId}/bundle-definitions");
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<List<BundleDefinition>>();
        }

        public async Task<BundleDefinition> CreateBundleDefinitionAsync(long programId, BundleDefinition bundle)
        {
            var response = await _httpClient.PostAsJsonAsync($"/programs/{programId}/bundle-definitions", bundle);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<BundleDefinition>()
                ?? throw new Exception("Failed to create bundle definition");
        }

        public async Task<ActivityDefinition> CreateActivityDefinitionAsync(long programId, ActivityDefinition activity)
        {
            var response = await _httpClient.PostAsJsonAsync($"/programs/{programId}/activity-definitions", activity);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<ActivityDefinition>()
                ?? throw new Exception("Failed to create activity definition");
        }

        public async Task AddActivityToBundleAsync(long programId, long bundleId, long activityId)
        {
            var response = await _httpClient.PostAsync(
                $"/programs/{programId}/bundle-definitions/{bundleId}/activity-definitions/{activityId}",
                null);
            response.EnsureSuccessStatusCode();
        }

        // Operating Unit Operations
        public async Task<OperatingUnit> GetOperatingUnitAsync(long ouId)
        {
            return await _httpClient.GetFromJsonAsync<OperatingUnit>($"/operating-units/{ouId}")
                ?? throw new Exception("Operating unit not found");
        }

        public async Task AddHcpToOperatingUnitAsync(long ouId, long userId)
        {
            var response = await _httpClient.PostAsync($"/operating-units/{ouId}/hcps/{userId}", null);
            response.EnsureSuccessStatusCode();
        }

        public async Task AddSubjectToOperatingUnitAsync(long ouId, long userId)
        {
            var response = await _httpClient.PostAsync($"/operating-units/{ouId}/subjects/{userId}", null);
            response.EnsureSuccessStatusCode();
        }

        // User Operations
        public async Task<List<User>> GetUsersAsync()
        {
            return await _httpClient.GetFromJsonAsync<List<User>>("/users")
                ?? new List<User>();
        }

        public async Task<User> CreateUserAsync(User user)
        {
            var response = await _httpClient.PostAsJsonAsync("/users", user);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<User>()
                ?? throw new Exception("Failed to create user");
        }

        public async Task<User> GetUserAsync(long userId)
        {
            return await _httpClient.GetFromJsonAsync<User>($"/users/{userId}")
                ?? throw new Exception("User not found");
        }

        // IDisposable implementation
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!_disposed)
            {
                if (disposing)
                {
                    _httpClient.Dispose();
                }
                _disposed = true;
            }
        }
    }
}
====== END FILE: ./Services/ApiService.cs ======

====== BEGIN FILE: ./ViewModels/MainWindowViewModel.cs ======
﻿using System;
using System.Windows.Input;
using AdminClient.Models;
using AdminClient.Services;
using AdminClient.Views;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;

namespace AdminClient.ViewModels
{
    // The partial keyword is needed for the source generators from CommunityToolkit.Mvvm
    public partial class MainWindowViewModel : ObservableObject
    {
        // Observable property for the current view/page title
        [ObservableProperty]
        private string _currentViewTitle = "Welcome";

        // Observable property that will hold our current page/view
        [ObservableProperty]
        private object _currentViewModel;

        // Reference to the API service that we can pass to other ViewModels
        private readonly ApiService _apiService;

        public MainWindowViewModel(ApiService apiService)
        {
            _apiService = apiService;

            // Set the initial OrganizationViewModel as the default model
            CurrentViewModel = new OrganizationViewModel(_apiService);
            CurrentViewTitle = "Organizations";
        }

        [RelayCommand]
        private void Navigate(Type viewModelType)
        {
            // Create and set the ViewModel
            if (viewModelType == typeof(OrganizationViewModel))
            {
                CurrentViewTitle = "Organizations";
                CurrentViewModel = new OrganizationViewModel(_apiService);
            }
            else if (viewModelType == typeof(ProgramViewModel))
            {
                CurrentViewTitle = "Programs";
                CurrentViewModel = new ProgramViewModel(_apiService);
            }
        }
    }
}
====== END FILE: ./ViewModels/MainWindowViewModel.cs ======

====== BEGIN FILE: ./ViewModels/OrganizationViewModel.cs ======
﻿using System.Collections.ObjectModel;
using System.ComponentModel;
using AdminClient.Models;
using AdminClient.Services;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Program = AdminClient.Models.Program;

namespace AdminClient.ViewModels
{
    // Using source generators from CommunityToolkit.Mvvm for cleaner property notifications
    public partial class OrganizationViewModel : ObservableObject
    {
        private readonly ApiService _apiService;
        private readonly string _regionId = "us"; // Default region

        [ObservableProperty]
        private bool _isLoading;

        [ObservableProperty]
        private string _errorMessage;

        [ObservableProperty]
        private ObservableCollection<Organization> _organizations = new();

        [ObservableProperty]
        private Organization _selectedOrganization;

        [ObservableProperty]
        private ObservableCollection<Program> _programs = new();

        [ObservableProperty]
        private Program _selectedProgram;

        private readonly Action<Program> _onProgramSelected;

        [RelayCommand]
        private void NavigateToProgram()
        {
            if (SelectedProgram != null)
            {
                _onProgramSelected(SelectedProgram);
            }
        }

        public OrganizationViewModel(ApiService apiService)
        {
            _apiService = apiService;
            LoadOrganizationsAsync().ConfigureAwait(false);
            //_onProgramSelected = onProgramSelected;


            //if (DesignerProperties.GetIsInDesignMode(new System.Windows.DependencyObject()))
            //{
            //    LoadSampleData();
            //}
            //else
            //{
            //    // Load real data when constructed
            //    LoadOrganizationsAsync().ConfigureAwait(false);
            //}
        }

        [RelayCommand]
        private async Task LoadOrganizationsAsync()
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                var orgs = await _apiService.GetOrganizationsForRegionAsync(_regionId);
                Organizations.Clear();
                foreach (var org in orgs)
                {
                    Organizations.Add(org);
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error loading organizations: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task LoadProgramsForSelectedOrganizationAsync()
        {
            if (SelectedOrganization == null) return;

            try
            {
                IsLoading = true;
                ErrorMessage = null;

                var progs = await _apiService.GetProgramsForOrganizationAsync(SelectedOrganization.Id);
                Programs.Clear();
                foreach (var prog in progs)
                {
                    Programs.Add(prog);
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error loading programs: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task CreateOrganizationAsync(string name)
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                var newOrg = new Organization { Name = name };
                var createdOrg = await _apiService.CreateOrganizationAsync(_regionId, newOrg);
                Organizations.Add(createdOrg);
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error creating organization: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task CreateProgramAsync(string name)
        {
            if (SelectedOrganization == null) return;

            try
            {
                IsLoading = true;
                ErrorMessage = null;

                var newProgram = new Program
                {
                    Name = name,
                    Organization = SelectedOrganization
                };

                var createdProgram = await _apiService.CreateProgramAsync(SelectedOrganization.Id, newProgram);
                Programs.Add(createdProgram);
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error creating program: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        // Helper method to load sample design-time data
        private void LoadSampleData()
        {
            Organizations.Clear();
            Organizations.Add(new Organization { Id = 1, Name = "Sample Organization 1" });
            Organizations.Add(new Organization { Id = 2, Name = "Sample Organization 2" });

            Programs.Clear();
            Programs.Add(new AdminClient.Models.Program { Id = 1, Name = "Sample Program 1" });
            Programs.Add(new AdminClient.Models.Program { Id = 2, Name = "Sample Program 2" });
        }

        // Property changed handlers
        partial void OnSelectedOrganizationChanged(Organization value)
        {
            if (value != null && !DesignerProperties.GetIsInDesignMode(new System.Windows.DependencyObject()))
            {
                LoadProgramsForSelectedOrganizationAsync().ConfigureAwait(false);
            }
        }
    }
}
====== END FILE: ./ViewModels/OrganizationViewModel.cs ======

====== BEGIN FILE: ./ViewModels/ProgramViewModel.cs ======
﻿using System.Collections.ObjectModel;
using AdminClient.Models;
using AdminClient.Services;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;

namespace AdminClient.ViewModels
{
    public partial class ProgramViewModel : ObservableObject
    {
        private readonly ApiService _apiService;

        [ObservableProperty]
        private bool _isLoading;

        [ObservableProperty]
        private string _errorMessage;

        [ObservableProperty]
        private Models.Program _program;

        [ObservableProperty]
        private ObservableCollection<OperatingUnit> _operatingUnits = new();

        [ObservableProperty]
        private OperatingUnit _selectedOperatingUnit;

        [ObservableProperty]
        private ObservableCollection<BundleDefinition> _bundles = new();

        public ProgramViewModel(ApiService apiService)
        {
            _apiService = apiService;
            //Program = program;
            LoadDataAsync().ConfigureAwait(false);
        }

        [RelayCommand]
        private async Task LoadDataAsync()
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                var units = await _apiService.GetOperatingUnitsForProgramAsync(Program.Id);
                OperatingUnits.Clear();
                foreach (var unit in units)
                {
                    OperatingUnits.Add(unit);
                }

                // Load bundles
                var programBundles = await _apiService.GetBundleDefinitionsForProgramAsync(Program.Id);
                Bundles.Clear();
                foreach (var bundle in programBundles)
                {
                    Bundles.Add(bundle);
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error loading data: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task CreateOperatingUnit()
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                var newUnit = new OperatingUnit
                {
                    Name = "New Operating Unit",
                    Program = Program
                };

                var createdUnit = await _apiService.CreateOperatingUnitAsync(Program.Id, newUnit);
                OperatingUnits.Add(createdUnit);
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error creating operating unit: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task CreateBundleDefinition()
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                var newBundleDefinition = new BundleDefinition
                {
                    Name = "New Bundle Definition",
                    Program = Program,
                    Status = BundleStatus.DRAFT
                };

                var createdBundleDefinition = await _apiService.CreateBundleDefinitionAsync(Program.Id, newBundleDefinition);
                Bundles.Add(createdBundleDefinition);
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error creating bundle definition: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task EditProgram()
        {
            // TODO: Implement edit functionality
        }
    }
}
====== END FILE: ./ViewModels/ProgramViewModel.cs ======

====== BEGIN FILE: ./Views/MainWindow.xaml ======
﻿<Window x:Class="AdminClient.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:ac="clr-namespace:AdminClient"
        xmlns:fa="http://schemas.awesome.incremented/wpf/xaml/fontawesome.sharp"
        xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
        xmlns:vm="clr-namespace:AdminClient.ViewModels"
        xmlns:views="clr-namespace:AdminClient.Views"
        Style="{StaticResource MaterialDesignWindow}"
        TextElement.FontWeight="Regular"
        TextElement.FontSize="13"
        TextOptions.TextFormattingMode="Ideal"
        TextOptions.TextRenderingMode="Auto"
        Title="MainWindow" Height="850" Width="1280" >

    <!-- Define how different ViewModels should be displayed -->
    <Window.Resources>
        <!-- This DataTemplate tells WPF: "When you see an OrganizationViewModel, display the OrganizationView" -->
        <DataTemplate DataType="{x:Type vm:OrganizationViewModel}">
            <views:OrganizationView />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:ProgramViewModel}">
            <views:ProgramView />
        </DataTemplate>
    </Window.Resources>

    <Grid Background="WhiteSmoke">
        <DockPanel>
            <!-- Navigation Menu -->
            <Border DockPanel.Dock="Top" 
                    Background="{StaticResource MaterialDesignPaper}" 
                    Effect="{StaticResource MaterialDesignShadowDepth2}">
                <StackPanel Orientation="Horizontal" 
                           Margin="16,8">
                    <Button Content="Organizations" 
                            Command="{Binding NavigateCommand}"
                            CommandParameter="{x:Type vm:OrganizationViewModel}"
                            Margin="0,0,8,0"
                            Style="{StaticResource MaterialDesignFlatButton}"/>
                    <Button Content="Programs" 
                            Command="{Binding NavigateCommand}"
                            CommandParameter="{x:Type vm:ProgramViewModel}"
                            Style="{StaticResource MaterialDesignFlatButton}"/>
                </StackPanel>
            </Border>

            <!-- Title Area -->
            <TextBlock DockPanel.Dock="Top" 
                      Text="{Binding CurrentViewTitle}" 
                      FontSize="24" 
                      Margin="16,16,16,8"
                      Style="{StaticResource MaterialDesignHeadline5TextBlock}"/>

            <!-- Main Content Area -->
            <Border Background="Wheat" 
                    Margin="16,8,16,16" 
                    Effect="{StaticResource MaterialDesignShadowDepth1}">
                <ContentControl Content="{Binding CurrentViewModel}"/>
            </Border>
        </DockPanel>
    </Grid>
</Window>

====== END FILE: ./Views/MainWindow.xaml ======

====== BEGIN FILE: ./Views/MainWindow.xaml.cs ======
﻿using System.Windows;
using System.Windows.Input;
using AdminClient.ViewModels;

namespace AdminClient
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public static readonly RoutedUICommand AdministrateCommand = new RoutedUICommand(
            "Administrate", "Administrate", typeof(MainWindow));
        public static readonly RoutedUICommand TreeViewCommand = new RoutedUICommand(
            "TreeViewCommand", "TreeViewCommand", typeof(MainWindow));
        public MainWindow(MainWindowViewModel viewModel)
        {
            InitializeComponent();
            this.DataContext = viewModel;
        }
    }
}

====== END FILE: ./Views/MainWindow.xaml.cs ======

====== BEGIN FILE: ./Views/OrganizationView.xaml ======
﻿<UserControl x:Class="AdminClient.Views.OrganizationView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:vm="clr-namespace:AdminClient.ViewModels"
             xmlns:converters="clr-namespace:AdminClient.Converters"
             d:DataContext="{d:DesignInstance Type=vm:OrganizationViewModel}"
             mc:Ignorable="d">

    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Error Message -->
        <TextBlock Grid.Row="0" 
                   Text="{Binding ErrorMessage}"
                   Foreground="Red"
                   Margin="0,0,0,10"
                   Visibility="{Binding ErrorMessage, Converter={StaticResource NullToVisibilityConverter}}"/>

        <!-- Main Content -->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <!-- Organizations List -->
            <DockPanel Grid.Column="0" Margin="0,0,10,0">
                <StackPanel DockPanel.Dock="Top" Margin="0,0,0,10">
                    <TextBlock Text="Organizations" 
                             FontWeight="Bold" 
                             FontSize="16"
                             Margin="0,0,0,10"/>

                    <Button Content="Add New Organization"
                            Command="{Binding CreateOrganizationCommand}"
                            Padding="10,5"/>
                    
                </StackPanel>

                <ListView ItemsSource="{Binding Organizations}"
                         SelectedItem="{Binding SelectedOrganization}">
                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Margin="5">
                                <TextBlock Text="{Binding Name}" FontWeight="SemiBold"/>
                                <TextBlock Text="{Binding Id, StringFormat='ID: {0}'}"
                                         Foreground="Gray"
                                         FontSize="11"/>
                            </StackPanel>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
            </DockPanel>

            <!-- Programs List -->
            <DockPanel Grid.Column="1" Margin="10,0,0,0">
                <StackPanel DockPanel.Dock="Top" Margin="0,0,0,10">
                    <TextBlock Text="Programs" 
                             FontWeight="Bold"
                             FontSize="16"
                             Margin="0,0,0,10"/>

                    <Button Content="Add New Program"
                            Command="{Binding CreateProgramCommand}"
                            IsEnabled="{Binding SelectedOrganization, 
                                      Converter={StaticResource NotNullToBooleanConverter}}"
                            Padding="10,5"/>
                </StackPanel>

                <ListView ItemsSource="{Binding Programs}" SelectedItem="{Binding SelectedProgram}">
                <ListView.InputBindings>
                    <MouseBinding MouseAction="LeftDoubleClick" 
                     Command="{Binding NavigateToProgramCommand}"/>
                </ListView.InputBindings>
                <ListView.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Margin="5">
                                <TextBlock Text="{Binding Name}" FontWeight="SemiBold"/>
                                <TextBlock Text="{Binding Id, StringFormat='ID: {0}'}"
                                         Foreground="Gray"
                                         FontSize="11"/>
                            </StackPanel>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
            </DockPanel>
        </Grid>

        <!-- Loading Indicator -->
        <Grid Grid.Row="0" Grid.RowSpan="3" 
              Background="#80000000" 
              Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}">
            <ProgressBar IsIndeterminate="True" 
                        Width="100" 
                        Height="20"
                        VerticalAlignment="Center"/>
        </Grid>
    </Grid>
</UserControl>
====== END FILE: ./Views/OrganizationView.xaml ======

====== BEGIN FILE: ./Views/OrganizationView.xaml.cs ======
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using AdminClient.Models;
using AdminClient.Services;
using AdminClient.ViewModels;

namespace AdminClient.Views
{
    /// <summary>
    /// Interaction logic for OrganizationView.xaml
    /// </summary>
    public partial class OrganizationView : UserControl
    {
        public OrganizationView()
        {
            InitializeComponent();
        }
    }
}

====== END FILE: ./Views/OrganizationView.xaml.cs ======

====== BEGIN FILE: ./Views/ProgramView.xaml ======
﻿<UserControl x:Class="AdminClient.Views.ProgramView"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:vm="clr-namespace:AdminClient.ViewModels"
      d:DataContext="{d:DesignInstance Type=vm:ProgramViewModel}"
      mc:Ignorable="d">

    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Error Message -->
        <TextBlock Grid.Row="0" 
                   Text="{Binding ErrorMessage}"
                   Foreground="Red"
                   Margin="0,0,0,10"
                   Visibility="{Binding ErrorMessage, Converter={StaticResource NullToVisibilityConverter}}"/>

        <!-- Main Content -->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <!-- Program Details -->
            <DockPanel Grid.Column="0" Margin="0,0,10,0">
                <StackPanel DockPanel.Dock="Top">
                    <TextBlock Text="Program Details" 
                             FontWeight="Bold" 
                             FontSize="16"
                             Margin="0,0,0,10"/>

                    <Grid Margin="0,0,0,10">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <TextBlock Text="Name:" Grid.Row="0" Grid.Column="0" Margin="0,0,10,5"/>
                        <TextBlock Text="{Binding Program.Name}" Grid.Row="0" Grid.Column="1"/>

                        <TextBlock Text="Organization:" Grid.Row="1" Grid.Column="0" Margin="0,0,10,5"/>
                        <TextBlock Text="{Binding Program.Organization.Name}" Grid.Row="1" Grid.Column="1"/>
                    </Grid>

                    <Button Content="Edit Program"
                            Command="{Binding EditProgramCommand}"
                            Padding="10,5"/>
                </StackPanel>

                <!-- Operating Units -->
                <DockPanel>
                    <TextBlock Text="Operating Units" 
                             FontWeight="Bold"
                             DockPanel.Dock="Top"
                             Margin="0,10"/>

                    <Button Content="Add Operating Unit"
                            Command="{Binding CreateOperatingUnitCommand}"
                            DockPanel.Dock="Top"
                            Margin="0,0,0,10"
                            Padding="10,5"/>

                    <ListView ItemsSource="{Binding OperatingUnits}"
                            SelectedItem="{Binding SelectedOperatingUnit}">
                        <ListView.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Margin="5">
                                    <TextBlock Text="{Binding Name}" FontWeight="SemiBold"/>
                                    <TextBlock Text="{Binding Id, StringFormat='ID: {0}'}"
                                             Foreground="Gray"
                                             FontSize="11"/>
                                </StackPanel>
                            </DataTemplate>
                        </ListView.ItemTemplate>
                    </ListView>
                </DockPanel>
            </DockPanel>

            <!-- Bundle Definitions -->
            <DockPanel Grid.Column="1" Margin="10,0,0,0">
                <StackPanel DockPanel.Dock="Top">
                    <TextBlock Text="Bundle Definitions" 
                             FontWeight="Bold"
                             FontSize="16"
                             Margin="0,0,0,10"/>

                    <Button Content="Add Bundle"
                            Command="{Binding CreateBundleDefinitionCommand}"
                            Padding="10,5"
                            Margin="0,0,0,10"/>
                </StackPanel>

                <ListView ItemsSource="{Binding Bundles}">
                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Margin="5">
                                <TextBlock Text="{Binding Name}" FontWeight="SemiBold"/>
                                <TextBlock Text="{Binding Status}"
                                         Foreground="Gray"
                                         FontSize="11"/>
                                <TextBlock Text="{Binding Activities.Count, StringFormat='Activities: {0}'}"
                                         Foreground="Gray"
                                         FontSize="11"/>
                            </StackPanel>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
            </DockPanel>
        </Grid>

        <!-- Loading Indicator -->
        <Grid Grid.Row="0" Grid.RowSpan="3" 
              Background="#80000000" 
              Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}">
            <ProgressBar IsIndeterminate="True" 
                        Width="100" 
                        Height="20"
                        VerticalAlignment="Center"/>
        </Grid>
    </Grid>
</UserControl>
====== END FILE: ./Views/ProgramView.xaml ======

====== BEGIN FILE: ./Views/ProgramView.xaml.cs ======
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace AdminClient.Views
{
    /// <summary>
    /// Interaction logic for ProgramView.xaml
    /// </summary>
    public partial class ProgramView : UserControl
    {
        public ProgramView()
        {
            InitializeComponent();
        }
    }
}

====== END FILE: ./Views/ProgramView.xaml.cs ======

