====== BEGIN FILE: ./App.xaml ======
﻿<Application x:Class="AdminClient.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:AdminClient"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:converters="clr-namespace:AdminClient.Converters">

    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <materialDesign:BundledTheme BaseTheme="Light" PrimaryColor="DeepPurple" SecondaryColor="Lime" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesign3.Defaults.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
            <converters:NotNullToBooleanConverter x:Key="NotNullToBooleanConverter"/>
            <converters:NodeTypeToIconConverter x:Key="NodeTypeToIconConverter"/>
            <converters:NodeTypeToColourConverter x:Key="NodeTypeToColourConverter"/>
        </ResourceDictionary>
    </Application.Resources>
</Application>

====== END FILE: ./App.xaml ======

====== BEGIN FILE: ./App.xaml.cs ======
﻿using System.Windows;
using System.Windows.Threading;  // This gives us access to Dispatcher
using AdminClient.Services;
using AdminClient.ViewModels;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

namespace AdminClient
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application
    {
        private readonly IHost _host;

        public App()
        {
            Syncfusion.Licensing.SyncfusionLicenseProvider.RegisterLicense("Ngo9BigBOggjHTQxAR8 / V1NMaF5cXmZCf1FpRmJGdld5fUVHYVZUTXxaS00DNHVRdkdnWH1cc3VXQ2ZcUkxxWEo =");

            _host = Host.CreateDefaultBuilder()
                .ConfigureAppConfiguration((context, builder) =>
                {
                    // Add appsettings.json
                    builder.AddJsonFile("appsettings.json", optional: false);

                    // Add appsettings.Development.json if it exists
                    builder.AddJsonFile($"appsettings.Development.json", optional: true);
                })
                .ConfigureServices((context, services) =>
                {
                    ConfigureServices(services, context.Configuration);
                })
                .Build();
        }

        // Dependency injection chain...
        private void ConfigureServices(IServiceCollection services, IConfiguration configuration)
        {
            // Register configuration - this is important!
            services.AddSingleton<IConfiguration>(configuration);

            // Register HttpClient factory
            services.AddHttpClient();

            // Register our ApiService
            services.AddSingleton<ApiService>();

            // Register ViewModels 
            services.AddSingleton<MainWindowViewModel>();

            // Register MainWindow which uses the MainWindowViewModel
            services.AddSingleton<MainWindow>();


            // Register Dispatcher
            services.AddSingleton(Dispatcher.CurrentDispatcher);
        }

        protected override async void OnStartup(StartupEventArgs e)
        {
            // First, we need to start our host which initializes all our services
            await _host.StartAsync();

            try
            {
                // Get the main window from the dependency injection container
                var mainWindow = _host.Services.GetRequiredService<MainWindow>();

                // Show the main window - this makes it visible to the user
                mainWindow.Show();

                // Set it as the application's main window
                MainWindow = mainWindow;
            }
            catch (Exception ex)
            {
                // Log any startup errors
                MessageBox.Show($"An error occurred during startup: {ex.Message}",
                               "Startup Error",
                               MessageBoxButton.OK,
                               MessageBoxImage.Error);

                // Shutdown the application if we can't start properly
                Shutdown(-1);
            }

            // Don't forget to call the base implementation
            base.OnStartup(e);
        }

        protected override async void OnExit(ExitEventArgs e)
        {
            using (_host)
            {
                await _host.StopAsync();
            }

            base.OnExit(e);
        }

        // Provide a static way to access services (useful for XAML)
        public static T GetService<T>()
            where T : class
        {
            if ((Current as App)?._host.Services.GetService(typeof(T)) is not T service)
            {
                throw new ArgumentException($"{typeof(T)} not found");
            }
            return service;
        }
    }

}

====== END FILE: ./App.xaml.cs ======

====== BEGIN FILE: ./AssemblyInfo.cs ======
using System.Windows;

[assembly: ThemeInfo(
    ResourceDictionaryLocation.None,            //where theme specific resource dictionaries are located
                                                //(used if a resource is not found in the page,
                                                // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly   //where the generic resource dictionary is located
                                                //(used if a resource is not found in the page,
                                                // app, or any theme specific resource dictionaries)
)]

====== END FILE: ./AssemblyInfo.cs ======

====== BEGIN FILE: ./Converters/ValueConverters.cs ======
﻿using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;
using System.Windows.Media;
using AdminClient.ViewModels;
using MaterialDesignThemes.Wpf;

namespace AdminClient.Converters
{
    public class NullToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return value == null ? Visibility.Collapsed : Visibility.Visible;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    public class NotNullToBooleanConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return value != null;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    public class BooleanToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return value is bool boolValue && boolValue ? Visibility.Visible : Visibility.Collapsed;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    // Map TreeView node type to Material Design icon
    public class NodeTypeToIconConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is TreeNodeType nodeType)
            {
                return nodeType switch
                {
                    TreeNodeType.Root => PackIconKind.ViewList,
                    TreeNodeType.Organization => PackIconKind.Domain,
                    TreeNodeType.Programs => PackIconKind.FolderMultiple,
                    TreeNodeType.Program => PackIconKind.Folder,
                    TreeNodeType.OperatingUnits => PackIconKind.FolderNetwork,
                    TreeNodeType.OperatingUnit => PackIconKind.FolderAccount,
                    TreeNodeType.BundleDefinitions => PackIconKind.FolderMultiple,
                    TreeNodeType.BundleDefinition => PackIconKind.Package,
                    TreeNodeType.ActivityDefinitions => PackIconKind.FolderCog,
                    TreeNodeType.ActivityDefinition => PackIconKind.FileDocument,
                    _ => PackIconKind.Circle
                };
            }
            return PackIconKind.Circle;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    // Map TreeView node type to Material Design color
    public class NodeTypeToColourConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is TreeNodeType nodeType)
            {
                return nodeType switch
                {
                    TreeNodeType.Root => new SolidColorBrush(Colors.Gray),
                    TreeNodeType.Organization => new SolidColorBrush((Color)ColorConverter.ConvertFromString("#1976D2")), // Material Blue
                    TreeNodeType.Programs => new SolidColorBrush((Color)ColorConverter.ConvertFromString("#388E3C")), // Material Green
                    TreeNodeType.Program => new SolidColorBrush((Color)ColorConverter.ConvertFromString("#43A047")), // Lighter Green
                    TreeNodeType.OperatingUnits => new SolidColorBrush((Color)ColorConverter.ConvertFromString("#7B1FA2")), // Material Purple
                    TreeNodeType.OperatingUnit => new SolidColorBrush((Color)ColorConverter.ConvertFromString("#8E24AA")), // Lighter Purple
                    TreeNodeType.BundleDefinitions => new SolidColorBrush((Color)ColorConverter.ConvertFromString("#F57C00")), // Material Orange
                    TreeNodeType.BundleDefinition => new SolidColorBrush((Color)ColorConverter.ConvertFromString("#FB8C00")), // Lighter Orange
                    TreeNodeType.ActivityDefinitions => new SolidColorBrush((Color)ColorConverter.ConvertFromString("#C2185B")), // Material Pink
                    TreeNodeType.ActivityDefinition => new SolidColorBrush((Color)ColorConverter.ConvertFromString("#D81B60")), // Lighter Pink
                    _ => new SolidColorBrush(Colors.Gray)
                };
            }
            return new SolidColorBrush(Colors.Gray);
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
====== END FILE: ./Converters/ValueConverters.cs ======

====== BEGIN FILE: ./Converters/YesNoToBooleanConverter.cs ======
﻿using System.Globalization;
using System.Windows.Data;

namespace AdminClient.Converters
{
    [ValueConversion(typeof(string), typeof(bool))]
    public class YesNoToBooleanConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            switch (value.ToString().ToLower())
            {
                case "yes":
                case "oui":
                    return true;
                case "no":
                case "non":
                    return false;
            }
            return false;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is bool)
            {
                if ((bool)value == true)
                    return "yes";
                else
                    return "no";
            }
            return "no";

        }
    }
}
====== END FILE: ./Converters/YesNoToBooleanConverter.cs ======

====== BEGIN FILE: ./Models/ApiModel.cs ======
﻿using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace AdminClient.Models
{
    // Base message content interface for type discrimination
    [JsonDerivedType(typeof(SubjectsListUpdate), typeDiscriminator: "SUBJECTS_LIST_UPDATE")]
    [JsonDerivedType(typeof(BundlesListUpdate), typeDiscriminator: "BUNDLES_LIST_UPDATE")]
    [JsonDerivedType(typeof(Assignment), typeDiscriminator: "ASSIGNMENT")]
    [JsonDerivedType(typeof(BatchAssignment), typeDiscriminator: "BATCH_ASSIGNMENT")]
    public interface IMessageContent { }

    public class Region
    {
        [JsonPropertyName("id")]
        public string Id { get; set; } = "US";

        [JsonPropertyName("organizations")]
        public List<Organization> Organizations { get; set; } = new();
    }

    public class Organization
    {
        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("programs")]
        public List<Program> Programs { get; set; } = new();
    }

    public class Program
    {
        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("organization")]
        public Organization Organization { get; set; }

        [JsonPropertyName("operatingUnits")]
        public List<OperatingUnit> OperatingUnits { get; set; } = new();
    }

    public class User
    {
        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("email")]
        public string Email { get; set; }

        [JsonPropertyName("role")]
        public UserRole Role { get; set; }

        [JsonPropertyName("organization")]
        public Organization Organization { get; set; }
    }

    public enum UserRole
    {
        ORGANIZATION_ADMIN,
        PROGRAM_ADMIN,
        OPERATING_UNIT_ADMIN,
        HCP,
        SUBJECT
    }

    public class OperatingUnit
    {
        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("program")]
        public Program Program { get; set; }

        // Note: HCPs and Subjects are marked JsonIgnore in Java, so we don't include them here
    }

    public class ActivityDefinition
    {
        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("instructions")]
        public string Instructions { get; set; }

        [JsonPropertyName("hcpOperated")]
        public bool HcpOperated { get; set; }

        [JsonPropertyName("program")]
        public Program Program { get; set; }
    }

    public class BundleDefinition
    {
        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("status")]
        public BundleStatus Status { get; set; } = BundleStatus.DRAFT;

        [JsonPropertyName("program")]
        public Program Program { get; set; }

        [JsonPropertyName("activities")]
        public List<ActivityDefinition> Activities { get; set; } = new();
    }

    public enum BundleStatus
    {
        DRAFT,
        APPROVED
    }

    // Message-related DTOs
    public class SubjectsListUpdate : IMessageContent
    {
        [JsonPropertyName("subjectIds")]
        public List<long> SubjectIds { get; set; } = new();
    }

    public class BundlesListUpdate : IMessageContent
    {
        [JsonPropertyName("bundleIds")]
        public List<long> BundleIds { get; set; } = new();
    }

    public class Assignment : IMessageContent
    {
        [JsonPropertyName("subjectId")]
        public long SubjectId { get; set; }

        [JsonPropertyName("bundleIds")]
        public List<long> BundleIds { get; set; } = new();
    }

    public class BatchAssignment : IMessageContent
    {
        [JsonPropertyName("subjectIds")]
        public List<long> SubjectIds { get; set; } = new();

        [JsonPropertyName("bundleIds")]
        public List<long> BundleIds { get; set; } = new();
    }

    public abstract class Message
    {
        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("fromOperatingUnit")]
        public OperatingUnit FromOperatingUnit { get; set; }

        [JsonPropertyName("content")]
        public string Content { get; set; }

        [JsonPropertyName("processed")]
        public bool Processed { get; set; }
    }

    public class HcpMessage : Message
    {
        // Inherits all properties from Message
    }

    public class SubjectMessage : Message
    {
        [JsonPropertyName("destinationSubject")]
        public User DestinationSubject { get; set; }
    }

    public class PersonalQueue
    {
        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("user")]
        public User User { get; set; }

        [JsonPropertyName("messages")]
        public List<Message> Messages { get; set; } = new();
    }
}

====== END FILE: ./Models/ApiModel.cs ======

====== BEGIN FILE: ./Services/ApiService.cs ======
﻿using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading.Tasks;
using AdminClient.Models;
using Microsoft.Extensions.Configuration;

namespace AdminClient.Services
{
    /// <summary>
    /// Service for handling all REST API communications with the backend.
    /// Uses HttpClient to make REST calls and handles serialization/deserialization of DTOs.
    /// </summary>
    public class ApiService : IDisposable
    {
        private readonly HttpClient _httpClient;
        private readonly string _baseUrl;
        private bool _disposed;

        public ApiService(IConfiguration configuration)
        {
            _baseUrl = configuration["ApiSettings:BaseUrl"] ?? "http://localhost:8080";
            _httpClient = new HttpClient
            {
                BaseAddress = new Uri(_baseUrl)
            };
        }

        // Region Operations
        public async Task<Region> GetRegionAsync(string regionId)
        {
            return await _httpClient.GetFromJsonAsync<Region>($"/regions/{regionId}")
                ?? throw new Exception("Region not found");
        }

        public async Task<List<Organization>> GetOrganizationsForRegionAsync(string regionId)
        {
            return await _httpClient.GetFromJsonAsync<List<Organization>>($"/regions/{regionId}/organizations")
                ?? new List<Organization>();
        }

        public async Task<Organization> CreateOrganizationAsync(string regionId, Organization org)
        {
            var response = await _httpClient.PostAsJsonAsync($"/regions/{regionId}/organizations", org);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<Organization>()
                ?? throw new Exception("Failed to create organization");
        }

        // Organization Operations
        public async Task<Organization> GetOrganizationAsync(long orgId)
        {
            return await _httpClient.GetFromJsonAsync<Organization>($"/organizations/{orgId}")
                ?? throw new Exception("Organization not found");
        }

        public async Task<List<Program>> GetProgramsForOrganizationAsync(long orgId)
        {
            return await _httpClient.GetFromJsonAsync<List<Program>>($"/organizations/{orgId}/programs")
                ?? new List<Program>();
        }

        public async Task<Program> CreateProgramAsync(long orgId, Program program)
        {
            var response = await _httpClient.PostAsJsonAsync($"/organizations/{orgId}/programs", program);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<Program>()
                ?? throw new Exception("Failed to create program");
        }

        // Program Operations
        public async Task<Program> GetProgramAsync(long programId)
        {
            return await _httpClient.GetFromJsonAsync<Program>($"/programs/{programId}")
                ?? throw new Exception("Program not found");
        }

        public async Task<List<OperatingUnit>> GetOperatingUnitsForProgramAsync(long programId)
        {
            return await _httpClient.GetFromJsonAsync<List<OperatingUnit>>($"/programs/{programId}/operating-units")
                ?? new List<OperatingUnit>();
        }

        public async Task<OperatingUnit> CreateOperatingUnitAsync(long programId, OperatingUnit ou)
        {
            var response = await _httpClient.PostAsJsonAsync($"/programs/{programId}/operating-units", ou);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<OperatingUnit>()
                ?? throw new Exception("Failed to create operating unit");
        }

        // Bundle and Activity Operations
        public async Task<List<BundleDefinition>> GetBundleDefinitionsForProgramAsync(long programId)
        {
            var response = await _httpClient.GetAsync($"/programs/{programId}/bundle-definitions");
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<List<BundleDefinition>>();
        }

        public async Task<BundleDefinition> CreateBundleDefinitionAsync(long programId, BundleDefinition bundle)
        {
            var response = await _httpClient.PostAsJsonAsync($"/programs/{programId}/bundle-definitions", bundle);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<BundleDefinition>()
                ?? throw new Exception("Failed to create bundle definition");
        }

        public async Task<ActivityDefinition> CreateActivityDefinitionAsync(long programId, ActivityDefinition activity)
        {
            var response = await _httpClient.PostAsJsonAsync($"/programs/{programId}/activity-definitions", activity);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<ActivityDefinition>()
                ?? throw new Exception("Failed to create activity definition");
        }

        public async Task AddActivityToBundleAsync(long programId, long bundleId, long activityId)
        {
            var response = await _httpClient.PostAsync(
                $"/programs/{programId}/bundle-definitions/{bundleId}/activity-definitions/{activityId}",
                null);
            response.EnsureSuccessStatusCode();
        }

        // Operating Unit Operations
        public async Task<OperatingUnit> GetOperatingUnitAsync(long ouId)
        {
            return await _httpClient.GetFromJsonAsync<OperatingUnit>($"/operating-units/{ouId}")
                ?? throw new Exception("Operating unit not found");
        }

        public async Task AddHcpToOperatingUnitAsync(long ouId, long userId)
        {
            var response = await _httpClient.PostAsync($"/operating-units/{ouId}/hcps/{userId}", null);
            response.EnsureSuccessStatusCode();
        }

        public async Task AddSubjectToOperatingUnitAsync(long ouId, long userId)
        {
            var response = await _httpClient.PostAsync($"/operating-units/{ouId}/subjects/{userId}", null);
            response.EnsureSuccessStatusCode();
        }

        // User Operations
        public async Task<List<User>> GetUsersAsync()
        {
            return await _httpClient.GetFromJsonAsync<List<User>>("/users")
                ?? new List<User>();
        }

        public async Task<User> CreateUserAsync(User user)
        {
            var response = await _httpClient.PostAsJsonAsync("/users", user);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<User>()
                ?? throw new Exception("Failed to create user");
        }

        public async Task<User> GetUserAsync(long userId)
        {
            return await _httpClient.GetFromJsonAsync<User>($"/users/{userId}")
                ?? throw new Exception("User not found");
        }

        // IDisposable implementation
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!_disposed)
            {
                if (disposing)
                {
                    _httpClient.Dispose();
                }
                _disposed = true;
            }
        }
    }
}
====== END FILE: ./Services/ApiService.cs ======

====== BEGIN FILE: ./ViewModels/BaseCollectionViewModel.cs ======
﻿using System.Collections.ObjectModel;
using System.Windows.Input;
using AdminClient.Services;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;

namespace AdminClient.ViewModels
{
    public abstract partial class BaseCollectionViewModel<T> : ObservableObject, ICollectionViewModel
    {
        protected readonly ApiService _apiService;

        [ObservableProperty]
        private bool _isLoading;

        [ObservableProperty]
        private string _errorMessage;

        [ObservableProperty]
        private ObservableCollection<T> _items = new();

        [ObservableProperty]
        private T _selectedItem;

        [ObservableProperty]
        private string _collectionTitle;

        public virtual bool CanAdd => true;
        public virtual bool CanEdit => SelectedItem != null;
        public virtual bool CanDelete => SelectedItem != null;

        public ICommand AddCommand => new AsyncRelayCommand(AddAsync);
        public ICommand EditCommand => new AsyncRelayCommand(EditAsync, () => CanEdit);
        public ICommand DeleteCommand => new AsyncRelayCommand(DeleteAsync, () => CanDelete);

        protected BaseCollectionViewModel(ApiService apiService)
        {
            _apiService = apiService;
        }

        protected virtual Task AddAsync() => Task.CompletedTask;
        protected virtual Task EditAsync() => Task.CompletedTask;
        protected virtual Task DeleteAsync() => Task.CompletedTask;

        protected abstract Task LoadDataAsync();
    }
}
====== END FILE: ./ViewModels/BaseCollectionViewModel.cs ======

====== BEGIN FILE: ./ViewModels/BundleDefinitionCollectionViewModel.cs ======
﻿using AdminClient.Models;
using AdminClient.Services;
using AdminClient.Views;
using CommunityToolkit.Mvvm.ComponentModel;
using System.Collections.ObjectModel;

namespace AdminClient.ViewModels
{
    public partial class BundleDefinitionCollectionViewModel : BaseCollectionViewModel<BundleDefinition>
    {
        private readonly Program _program;

        public BundleDefinitionCollectionViewModel(ApiService apiService, Program program)
            : base(apiService)
        {
            _program = program;
            CollectionTitle = $"Bundle Definitions - {program.Name}";
            LoadDataAsync().ConfigureAwait(false);
        }

        protected override async Task LoadDataAsync()
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                var bundles = await _apiService.GetBundleDefinitionsForProgramAsync(_program.Id);
                Items.Clear();
                foreach (var bundle in bundles)
                {
                    Items.Add(bundle);
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error loading bundle definitions: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        protected override async Task AddAsync()
        {
            // Create and setup dialog
            var dialogViewModel = new CreateBundleDefinitionViewModel(_apiService, _program);
            var dialog = new CreateBundleDefinitionDialog { DataContext = dialogViewModel };

            try
            {
                IsLoading = true;
                ErrorMessage = null;

                dialogViewModel.BundleCreated += (s, newBundle) =>
                {
                    Items.Add(newBundle);
                };

                // Show dialog and wait for result
                await MaterialDesignThemes.Wpf.DialogHost.Show(dialog);
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error creating bundle definition: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }
    }
}
====== END FILE: ./ViewModels/BundleDefinitionCollectionViewModel.cs ======

====== BEGIN FILE: ./ViewModels/BundleDefinitionViewModel.cs ======
﻿using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AdminClient.Models;
using AdminClient.Services;
using CommunityToolkit.Mvvm.ComponentModel;

namespace AdminClient.ViewModels
{
    public partial class BundleDefinitionViewModel : ObservableObject
    {
        private readonly ApiService _apiService;

        [ObservableProperty]
        private bool _isLoading;

        [ObservableProperty]
        private string _errorMessage;

        [ObservableProperty]
        private BundleDefinition _bundleDefinition;

        [ObservableProperty]
        private ObservableCollection<ActivityDefinition> _activities = new();

        public BundleDefinitionViewModel(ApiService apiService, BundleDefinition bundleDefinition)
        {
            _apiService = apiService;
            _bundleDefinition = bundleDefinition;
            LoadDataAsync().ConfigureAwait(false);
        }

        private async Task LoadDataAsync()
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                // Load activities from the bundle
                foreach (var activity in _bundleDefinition.Activities)
                {
                    Activities.Add(activity);
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error loading bundle definition data: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }
    }
}

====== END FILE: ./ViewModels/BundleDefinitionViewModel.cs ======

====== BEGIN FILE: ./ViewModels/CreateBundleDefinitionViewModel.cs ======
﻿using AdminClient.Models;
using AdminClient.Services;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;

namespace AdminClient.ViewModels
{
    public partial class CreateBundleDefinitionViewModel : ObservableObject
    {
        private readonly ApiService _apiService;
        private readonly Program _program;

        [ObservableProperty]
        private bool _isLoading;

        [ObservableProperty]
        private string _name;

        public event EventHandler<BundleDefinition> BundleCreated;
        public event EventHandler DialogClosed;

        public CreateBundleDefinitionViewModel(ApiService apiService, Program program)
        {
            _apiService = apiService;
            _program = program;
        }

        [RelayCommand]
        private void Cancel()
        {
            DialogClosed?.Invoke(this, EventArgs.Empty);
        }

        [RelayCommand]
        private async Task Create()
        {
            if (string.IsNullOrWhiteSpace(Name))
            {
                System.Windows.MessageBox.Show("Bundle name cannot be empty");
                return;
            }

            try
            {
                IsLoading = true;

                var newBundle = new BundleDefinition
                {
                    Name = Name,
                    Program = _program,
                    Status = BundleStatus.DRAFT
                };

                var createdBundle = await _apiService.CreateBundleDefinitionAsync(_program.Id, newBundle);
                BundleCreated?.Invoke(this, createdBundle);
                DialogClosed?.Invoke(this, EventArgs.Empty);
            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show($"Error creating bundle definition: {ex.Message}");
            }
            finally
            {
                IsLoading = false;
            }
        }
    }
}
====== END FILE: ./ViewModels/CreateBundleDefinitionViewModel.cs ======

====== BEGIN FILE: ./ViewModels/EditOrganizationViewModel.cs ======
﻿using AdminClient.Models;
using AdminClient.Services;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System;
using System.Threading.Tasks;

namespace AdminClient.ViewModels
{
    public partial class EditOrganizationViewModel : ObservableObject
    {
        private readonly ApiService _apiService;
        private readonly Organization _originalOrganization;

        [ObservableProperty]
        private bool _isLoading;

        [ObservableProperty]
        private string _name;

        public event EventHandler<Organization> OrganizationUpdated;
        public event EventHandler DialogClosed;

        public EditOrganizationViewModel(ApiService apiService, Organization organization)
        {
            _apiService = apiService;
            _originalOrganization = organization;

            // Initialize properties
            Name = organization.Name;
        }

        [RelayCommand]
        private async Task Save()
        {
            try
            {
                IsLoading = true;

                // Create updated organization object
                var updatedOrg = new Organization
                {
                    Id = _originalOrganization.Id,
                    Name = Name
                };

                // TODO: Add API endpoint for updating organization
                //await _apiService.UpdateOrganizationAsync(updatedOrg);

                // Notify subscribers that update was successful
                OrganizationUpdated?.Invoke(this, updatedOrg);
                DialogClosed?.Invoke(this, EventArgs.Empty);
            }
            catch (Exception ex)
            {
                // TODO: Handle error (could add ErrorMessage property and show in UI)
                System.Windows.MessageBox.Show($"Error updating organization: {ex.Message}");
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private void Cancel()
        {
            DialogClosed?.Invoke(this, EventArgs.Empty);
        }
    }
}
====== END FILE: ./ViewModels/EditOrganizationViewModel.cs ======

====== BEGIN FILE: ./ViewModels/EditProgramViewModel.cs ======
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AdminClient.Models;
using AdminClient.Services;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;

namespace AdminClient.ViewModels
{
    public partial class EditProgramViewModel : ObservableObject
    {
        private readonly ApiService _apiService;
        private readonly Program _originalProgram;

        [ObservableProperty]
        private bool _isLoading;

        [ObservableProperty]
        private string _name;

        public event EventHandler<Program> ProgramUpdated;
        public event EventHandler DialogClosed;

        public EditProgramViewModel(ApiService apiService, Program program)
        {
            _apiService = apiService;
            _originalProgram = program;
            Name = program.Name;
        }

        [RelayCommand]
        private void Cancel()
        {
            DialogClosed?.Invoke(this, EventArgs.Empty);
        }

        [RelayCommand]
        private async Task Save()
        {
            try
            {
                IsLoading = true;

                var updatedProgram = new Program
                {
                    Id = _originalProgram.Id,
                    Name = Name,
                    Organization = _originalProgram.Organization
                };

                // TODO: Add API endpoint for updating program
                //await _apiService.UpdateProgramAsync(updatedProgram);

                ProgramUpdated?.Invoke(this, updatedProgram);
                DialogClosed?.Invoke(this, EventArgs.Empty);
            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show($"Error updating program: {ex.Message}");
            }
            finally
            {
                IsLoading = false;
            }
        }
    }
}

====== END FILE: ./ViewModels/EditProgramViewModel.cs ======

====== BEGIN FILE: ./ViewModels/ICollectionViewModel.cs ======
﻿using System.Windows.Input;

namespace AdminClient.ViewModels
{
    public interface ICollectionViewModel
    {
        bool IsLoading { get; }
        string ErrorMessage { get; }
        string CollectionTitle { get; }
        bool CanAdd { get; }
        bool CanEdit { get; }
        bool CanDelete { get; }
        ICommand AddCommand { get; }
        ICommand EditCommand { get; }
        ICommand DeleteCommand { get; }
    }
}
====== END FILE: ./ViewModels/ICollectionViewModel.cs ======

====== BEGIN FILE: ./ViewModels/MainWindowViewModel.cs ======
﻿using System;
using System.Collections.ObjectModel;
using System.Windows;
using System.Windows.Input;
using AdminClient.Models;
using AdminClient.Services;
using AdminClient.Views;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;

namespace AdminClient.ViewModels
{
    // The partial keyword is needed for the source generators from CommunityToolkit.Mvvm
    public partial class MainWindowViewModel : ObservableObject
    {
        // TreeView model for the navigation pane
        public ObservableCollection<TreeNodeViewModel> TreeNodes { get; } = new();
        [ObservableProperty]
        private TreeNodeViewModel _selectedNode;
        [ObservableProperty]
        private bool _isTreeLoading;

        // Current ViewModel
        [ObservableProperty]
        private object _currentViewModel;
        // Current view's title
        [ObservableProperty]
        private string _currentViewTitle = "Welcome";

        // Add navigation stack and 'back' command.
        [ObservableProperty]
        private bool _canNavigateBack;
        private readonly Stack<(object ViewModel, string Title)> _navigationStack = new();
        private bool _disposed;

        // Reference to the API service that we will pass down to other ViewModels
        private readonly ApiService _apiService;

        // Dictionary to map TreeNodeType to ViewModel type
        private readonly Dictionary<TreeNodeType, Func<TreeNodeViewModel, object>> _viewModelFactories;
        public MainWindowViewModel(ApiService apiService)
        {
            _apiService = apiService;

            var orgViewModel = new OrganizationCollectionViewModel(_apiService);
            CurrentViewModel = orgViewModel;
            CurrentViewTitle = "Organizations";

            // load tree view's model from db
            LoadTreeAsync().ConfigureAwait(false);
        }

        [RelayCommand]
        private void Navigate(Type viewModelType)
        {
            if (viewModelType == typeof(OrganizationViewModel))
            {
                if (CurrentViewModel is OrganizationViewModel oldViewModel)
                {
                    oldViewModel.OrganizationSelected -= OnOrganizationSelected;
                }

                CurrentViewTitle = "Organizations";
                var orgViewModel = new OrganizationViewModel(_apiService);
                orgViewModel.OrganizationSelected += OnOrganizationSelected;
                CurrentViewModel = orgViewModel;
            }
        }

        private void OnOrganizationSelected(object sender, Organization org)
        {
            if (CurrentViewModel is OrganizationViewModel oldViewModel)
            {
                oldViewModel.OrganizationSelected -= OnOrganizationSelected;
            }

            _navigationStack.Push((CurrentViewModel, CurrentViewTitle));

            // Create dummy program for navigation
            var program = new Program
            {
                Organization = org,
                Name = "Default Program" // You may want to load real program data here
            };

            var programViewModel = new ProgramViewModel(_apiService, org) { Program = program };
            CurrentViewModel = programViewModel;
            CurrentViewTitle = $"Programs - {org.Name}";
            CanNavigateBack = true;
        }

        [RelayCommand]
        private void NavigateBack()
        {
            if (_navigationStack.Count > 0)
            {
                var (viewModel, title) = _navigationStack.Pop();

                if (viewModel is OrganizationViewModel newViewModel)
                {
                    newViewModel.OrganizationSelected += OnOrganizationSelected;
                }

                CurrentViewModel = viewModel;
                CurrentViewTitle = title;
                CanNavigateBack = _navigationStack.Count > 0;
            }
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!_disposed)
            {
                if (disposing && CurrentViewModel is OrganizationViewModel viewModel)
                {
                    viewModel.OrganizationSelected -= OnOrganizationSelected;
                }
                _disposed = true;
            }
        }

        private async Task LoadTreeAsync()
        {
            try
            {
                IsTreeLoading = true;
                await InitializeTreeAsync();
            }
            finally
            {
                IsTreeLoading = false;
            }
        }

        private async Task InitializeTreeAsync()
        {
            try
            {
                // Clear existing nodes before loading new data
                TreeNodes.Clear();

                // Create and add root organizations node
                var rootNode = new TreeNodeViewModel("Organizations", TreeNodeType.Root);
                TreeNodes.Add(rootNode);

                var orgs = await _apiService.GetOrganizationsForRegionAsync("us");

                foreach (var org in orgs)
                {
                    var orgNode = new TreeNodeViewModel(org.Name, TreeNodeType.Organization, org);
                    rootNode.AddChild(orgNode);

                    var programsNode = new TreeNodeViewModel("Programs", TreeNodeType.Programs);
                    orgNode.AddChild(programsNode);

                    var programs = await _apiService.GetProgramsForOrganizationAsync(org.Id);
                    foreach (var program in programs)
                    {
                        await AddProgramNode(programsNode, program);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading tree data: {ex.Message}");
            }
        }

        // Helper method for creating nodes from db data
        private async Task AddProgramNode(TreeNodeViewModel programsNode, Program program)
        {
            var programNode = new TreeNodeViewModel(program.Name, TreeNodeType.Program, program);
            programsNode.AddChild(programNode);

            // ADD Operating Units with real data
            var operatingUnitsNode = new TreeNodeViewModel("Operating Units", TreeNodeType.OperatingUnits);
            programNode.AddChild(operatingUnitsNode);

            var operatingUnits = await _apiService.GetOperatingUnitsForProgramAsync(program.Id);
            foreach (var unit in operatingUnits)
            {
                var unitNode = new TreeNodeViewModel(unit.Name, TreeNodeType.OperatingUnit, unit);
                operatingUnitsNode.AddChild(unitNode);
            }

            var bundleDefsNode = new TreeNodeViewModel("Bundle Definitions", TreeNodeType.BundleDefinitions);
            programNode.AddChild(bundleDefsNode);

            var bundles = await _apiService.GetBundleDefinitionsForProgramAsync(program.Id);
            foreach (var bundle in bundles)
            {
                var bundleNode = new TreeNodeViewModel(bundle.Name, TreeNodeType.BundleDefinition, bundle);
                bundleDefsNode.AddChild(bundleNode);
            }
        }

        public async Task HandleTreeNodeSelectionAsync(TreeNodeViewModel selectedNode)
        {
            if (selectedNode == null) return;

            try
            {
                if (selectedNode.IsCollectionNode)
                {
                    switch (selectedNode.NodeType)
                    {
                        case TreeNodeType.Root:
                            _navigationStack.Push((CurrentViewModel, CurrentViewTitle));
                            var orgCollectionViewModel = new OrganizationCollectionViewModel(_apiService);
                            CurrentViewModel = orgCollectionViewModel;
                            CurrentViewTitle = orgCollectionViewModel.CollectionTitle;
                            CanNavigateBack = true;
                            break;
                        case TreeNodeType.Programs:
                            if (selectedNode.Parent?.ModelObject is Organization parentOrg)
                            {
                                _navigationStack.Push((CurrentViewModel, CurrentViewTitle));
                                var programCollectionViewModel = new ProgramCollectionViewModel(_apiService, parentOrg);
                                CurrentViewModel = programCollectionViewModel;
                                CurrentViewTitle = programCollectionViewModel.CollectionTitle;
                                CanNavigateBack = true;
                            }
                            break;
                        case TreeNodeType.OperatingUnits:
                            if (selectedNode.Parent?.ModelObject is Program parentProgramForOU)
                            {
                                _navigationStack.Push((CurrentViewModel, CurrentViewTitle));
                                var operatingUnitCollectionViewModel = new OperatingUnitCollectionViewModel(_apiService, parentProgramForOU);
                                CurrentViewModel = operatingUnitCollectionViewModel;
                                CurrentViewTitle = operatingUnitCollectionViewModel.CollectionTitle;
                                CanNavigateBack = true;
                            }
                            break;
                        case TreeNodeType.BundleDefinitions:
                            if (selectedNode.Parent?.ModelObject is Program parentProgramForBD)
                            {
                                _navigationStack.Push((CurrentViewModel, CurrentViewTitle));
                                var bundleCollectionViewModel = new BundleDefinitionCollectionViewModel(_apiService, parentProgramForBD);
                                CurrentViewModel = bundleCollectionViewModel;
                                CurrentViewTitle = bundleCollectionViewModel.CollectionTitle;
                                CanNavigateBack = true;
                            }
                            break;
                        // Add other collection cases
                        default:
                            // Handle unknown collection type
                            break;
                    }
                    return;
                }
                // MODIFY switch statement to handle all node types
                switch (selectedNode.NodeType)
                {
                    // Keep existing Organization handling
                    case TreeNodeType.Organization:
                        if (selectedNode.ModelObject is Organization org)
                        {
                            _navigationStack.Push((CurrentViewModel, CurrentViewTitle));
                            var detailViewModel = new OrganizationDetailViewModel(_apiService, org);
                            CurrentViewModel = detailViewModel;
                            CurrentViewTitle = $"Organization - {org.Name}";
                            CanNavigateBack = true;
                        }
                        break;

                    // ADD Program handling
                    case TreeNodeType.Program:
                        if (selectedNode.ModelObject is Program program)
                        {
                            try
                            {
                                // Fetch the complete program details including organization.
                                var completeProgram = await _apiService.GetProgramAsync(program.Id);

                                _navigationStack.Push((CurrentViewModel, CurrentViewTitle));
                                var programViewModel = new ProgramViewModel(_apiService, completeProgram.Organization)
                                {
                                    Program = completeProgram
                                };
                                CurrentViewModel = programViewModel;
                                CurrentViewTitle = $"Program - {completeProgram.Name}";
                                CanNavigateBack = true;
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show($"Error loading program details: {ex.Message}");
                            }
                        }
                        break;
                    case TreeNodeType.OperatingUnit:
                        if (selectedNode.ModelObject is OperatingUnit unit)
                        {
                            _navigationStack.Push((CurrentViewModel, CurrentViewTitle));

                            var detailViewModel = new OperatingUnitDetailViewModel(_apiService, unit);
                            CurrentViewModel = detailViewModel;
                            CurrentViewTitle = $"Operating Unit - {unit.Name}";
                            CanNavigateBack = true;
                        }
                        break;

                    case TreeNodeType.BundleDefinition:
                        if (selectedNode.ModelObject is BundleDefinition bundle)
                        {
                            _navigationStack.Push((CurrentViewModel, CurrentViewTitle));

                            var bundleViewModel = new BundleDefinitionViewModel(_apiService, bundle);
                            CurrentViewModel = bundleViewModel;
                            CurrentViewTitle = $"Bundle - {bundle.Name}";
                            CanNavigateBack = true;
                        }
                        break;

                    // Container nodes don't need navigation
                    case TreeNodeType.Root:
                    case TreeNodeType.Programs:
                    case TreeNodeType.OperatingUnits:
                    case TreeNodeType.BundleDefinitions:
                        break;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error handling selection: {ex.Message}");
            }
        }
    }
}
====== END FILE: ./ViewModels/MainWindowViewModel.cs ======

====== BEGIN FILE: ./ViewModels/OperatingUnitCollectionViewModel.cs ======
﻿using AdminClient.Models;
using AdminClient.Services;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using MaterialDesignThemes.Wpf;
using System.Collections.ObjectModel;
using System.Windows.Controls;

namespace AdminClient.ViewModels
{
    public partial class OperatingUnitCollectionViewModel : BaseCollectionViewModel<OperatingUnit>
    {
        private readonly Program _program;
        public event EventHandler<OperatingUnit> OperatingUnitSelected;

        [ObservableProperty]
        private ObservableCollection<User> _hcps = new();

        [ObservableProperty]
        private ObservableCollection<User> _subjects = new();

        public OperatingUnitCollectionViewModel(ApiService apiService, Program program)
            : base(apiService)
        {
            _program = program;
            CollectionTitle = $"Operating Units - {program.Name}";
            LoadDataAsync().ConfigureAwait(false);
        }

        protected override async Task LoadDataAsync()
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                var operatingUnits = await _apiService.GetOperatingUnitsForProgramAsync(_program.Id);
                Items.Clear();
                foreach (var unit in operatingUnits)
                {
                    Items.Add(unit);
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error loading operating units: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        protected override async Task AddAsync()
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                var newUnit = new OperatingUnit
                {
                    Name = $"New Operating Unit {Items.Count + 1}",
                    Program = _program
                };

                var createdUnit = await _apiService.CreateOperatingUnitAsync(_program.Id, newUnit);
                Items.Add(createdUnit);
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error creating operating unit: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task ViewHcps(OperatingUnit operatingUnit)
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                // TODO: Add API endpoint for getting HCPs
                // var hcps = await _apiService.GetHcpsForOperatingUnitAsync(operatingUnit.Id);

                // For now, showing a dialog indicating the feature is coming soon
                await DialogHost.Show(new MaterialDesignThemes.Wpf.Card
                {
                    Content = new TextBlock
                    {
                        Text = "HCP viewing coming soon",
                        Margin = new System.Windows.Thickness(16)
                    }
                });
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error loading HCPs: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task ViewSubjects(OperatingUnit operatingUnit)
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                // TODO: Add API endpoint for getting Subjects
                // var subjects = await _apiService.GetSubjectsForOperatingUnitAsync(operatingUnit.Id);

                // For now, showing a dialog indicating the feature is coming soon
                await DialogHost.Show(new MaterialDesignThemes.Wpf.Card
                {
                    Content = new TextBlock
                    {
                        Text = "Subject viewing coming soon",
                        Margin = new System.Windows.Thickness(16)
                    }
                });
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error loading subjects: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }
    }
}
====== END FILE: ./ViewModels/OperatingUnitCollectionViewModel.cs ======

====== BEGIN FILE: ./ViewModels/OperatingUnitDetailViewModel.cs ======
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AdminClient.Models;
using AdminClient.Services;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;

namespace AdminClient.ViewModels
{
    public partial class OperatingUnitDetailViewModel : ObservableObject
    {
        private readonly ApiService _apiService;
        private readonly OperatingUnit _operatingUnit;

        [ObservableProperty]
        private bool _isLoading;

        [ObservableProperty]
        private string _errorMessage;

        [ObservableProperty]
        private string _name;

        [ObservableProperty]
        private Program _program;

        public OperatingUnitDetailViewModel(ApiService apiService, OperatingUnit operatingUnit)
        {
            _apiService = apiService;
            _operatingUnit = operatingUnit;
            Name = operatingUnit.Name;
            Program = operatingUnit.Program;
            LoadDataAsync().ConfigureAwait(false);
        }

        private async Task LoadDataAsync()
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                var ouDetails = await _apiService.GetOperatingUnitAsync(_operatingUnit.Id);
                // Update additional fields when available

            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error loading operating unit details: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task Save()
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                _operatingUnit.Name = Name;
                // TODO: Add API endpoint for updating
                //await _apiService.UpdateOperatingUnitAsync(_operatingUnit);

            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error saving operating unit: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private void Cancel()
        {
            // Handle cancel action
        }
    }
}

====== END FILE: ./ViewModels/OperatingUnitDetailViewModel.cs ======

====== BEGIN FILE: ./ViewModels/OperatingUnitViewModel.cs ======
﻿using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AdminClient.Models;
using AdminClient.Services;
using CommunityToolkit.Mvvm.ComponentModel;

namespace AdminClient.ViewModels
{
    public partial class OperatingUnitViewModel : ObservableObject
    {
        private readonly ApiService _apiService;

        [ObservableProperty]
        private bool _isLoading;

        [ObservableProperty]
        private string _errorMessage;

        [ObservableProperty]
        private OperatingUnit _operatingUnit;

        // ADD collections for HCPs and Subjects
        [ObservableProperty]
        private ObservableCollection<User> _hcps = new();

        [ObservableProperty]
        private ObservableCollection<User> _subjects = new();

        public OperatingUnitViewModel(ApiService apiService, OperatingUnit operatingUnit)
        {
            _apiService = apiService;
            _operatingUnit = operatingUnit;
            LoadDataAsync().ConfigureAwait(false);
        }

        private async Task LoadDataAsync()
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                // Here we would load HCPs and Subjects
                // Note: API endpoint needs to be added to ApiService
                // _apiService.GetHcpsForOperatingUnitAsync(OperatingUnit.Id);
                // _apiService.GetSubjectsForOperatingUnitAsync(OperatingUnit.Id);
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error loading operating unit data: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }
    }
}

====== END FILE: ./ViewModels/OperatingUnitViewModel.cs ======

====== BEGIN FILE: ./ViewModels/OrganizationCollectionViewModel.cs ======
﻿using AdminClient.Models;
using AdminClient.Services;
using CommunityToolkit.Mvvm.ComponentModel;

namespace AdminClient.ViewModels
{
    public partial class OrganizationCollectionViewModel : BaseCollectionViewModel<Organization>
    {
        private readonly string _regionId;
        // The selected organization
        public event EventHandler<Organization> OrganizationSelected;

        public OrganizationCollectionViewModel(ApiService apiService, string regionId = "us")
            : base(apiService)
        {
            _regionId = regionId;
            CollectionTitle = "Organizations";
            LoadDataAsync().ConfigureAwait(false);
        }

        protected override async Task LoadDataAsync()
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                var organizations = await _apiService.GetOrganizationsForRegionAsync(_regionId);
                Items.Clear();
                foreach (var org in organizations)
                {
                    Items.Add(org);
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error loading organizations: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        protected override async Task AddAsync()
        {
            // We'll implement this in the next micro-feature
            await Task.CompletedTask;
        }
    }
}
====== END FILE: ./ViewModels/OrganizationCollectionViewModel.cs ======

====== BEGIN FILE: ./ViewModels/OrganizationDetailViewModel.cs ======
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AdminClient.Models;
using AdminClient.Services;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;

namespace AdminClient.ViewModels
{
    public partial class OrganizationDetailViewModel : ObservableObject
    {
        private readonly ApiService _apiService;
        private readonly Organization _organization;

        [ObservableProperty]
        private bool _isLoading;

        [ObservableProperty]
        private string _errorMessage;

        [ObservableProperty]
        private string _name;

        [ObservableProperty]
        private string _description;

        public OrganizationDetailViewModel(ApiService apiService, Organization organization)
        {
            _apiService = apiService;
            _organization = organization;
            Name = organization.Name;
            // Add other properties as needed
            LoadDataAsync().ConfigureAwait(false);
        }

        private async Task LoadDataAsync()
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                // Load additional organization details if needed
                var orgDetails = await _apiService.GetOrganizationAsync(_organization.Id);
                // Populate additional fields

            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error loading organization details: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task Save()
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                _organization.Name = Name;
                // Update other properties

                // TODO: Add API endpoint for updating
                //await _apiService.UpdateOrganizationAsync(_organization);

            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error saving organization: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private void Cancel()
        {
            // Handle cancel action
        }
    }
}

====== END FILE: ./ViewModels/OrganizationDetailViewModel.cs ======

====== BEGIN FILE: ./ViewModels/OrganizationViewModel.cs ======
﻿using System.Collections.ObjectModel;
using System.ComponentModel;
using AdminClient.Models;
using AdminClient.Services;
using AdminClient.Views;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Program = AdminClient.Models.Program;

namespace AdminClient.ViewModels
{
    // Using source generators from CommunityToolkit.Mvvm for cleaner property notifications
    public partial class OrganizationViewModel : ObservableObject
    {
        private readonly ApiService _apiService;
        private readonly string _regionId = "us"; // Default region

        [ObservableProperty]
        private bool _isLoading;

        [ObservableProperty]
        private string _errorMessage;

        [ObservableProperty]
        private ObservableCollection<Organization> _organizations = new();

        [ObservableProperty]
        private Organization _selectedOrganization;

        public event EventHandler<Organization> OrganizationSelected;

        public OrganizationViewModel(ApiService apiService)
        {
            _apiService = apiService;
            LoadOrganizationsAsync().ConfigureAwait(false);
        }

        [RelayCommand]
        private async Task LoadOrganizationsAsync()
        {
            try
            {
                IsLoading = true;
                // Clear any previous error messages
                ErrorMessage = null;

                var orgs = await _apiService.GetOrganizationsForRegionAsync(_regionId);
                Organizations.Clear();
                foreach (var org in orgs)
                {
                    Organizations.Add(org);
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error loading organizations: {ex.Message}";
            }
            finally
            {
                // Always clear loading animation
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task CreateOrganizationAsync()
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                var name = $"New Organization {Organizations.Count + 1}";
                var newOrg = new Organization { Name = name };
                var createdOrg = await _apiService.CreateOrganizationAsync(_regionId, newOrg);
                Organizations.Add(createdOrg);
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error creating organization: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private void DrillDown()
        {
            if (SelectedOrganization != null)
            {
                // Raise event to notify parent ViewModel
                OrganizationSelected?.Invoke(this, SelectedOrganization);
            }
        }

        [RelayCommand]
        private async Task EditOrganization(Organization organization)
        {
            var dialogViewModel = new EditOrganizationViewModel(_apiService, organization);

            var dialog = new EditOrganizationDialog
            {
                DataContext = dialogViewModel
            };

            dialogViewModel.OrganizationUpdated += (s, updatedOrg) =>
            {
                // Update the organization in the collection
                var index = Organizations.IndexOf(organization);
                if (index != -1)
                {
                    Organizations[index] = updatedOrg;
                }
            };

            // Show dialog
            //var dialogHost = MaterialDesignThemes.Wpf.DialogHost.GetDialogHost("RootDialog");
            var dialogHost = MaterialDesignThemes.Wpf.DialogHost.Show(dialog);
//            await dialogHost.(dialog);
        }
    }
}
====== END FILE: ./ViewModels/OrganizationViewModel.cs ======

====== BEGIN FILE: ./ViewModels/ProgramCollectionViewModel.cs ======
﻿using AdminClient.Models;
using AdminClient.Services;
using AdminClient.Views;
using CommunityToolkit.Mvvm.ComponentModel;
using MaterialDesignThemes.Wpf;

namespace AdminClient.ViewModels
{
    public partial class ProgramCollectionViewModel : BaseCollectionViewModel<Program>
    {
        private readonly Organization _organization;
        public event EventHandler<Program> ProgramSelected;

        public ProgramCollectionViewModel(ApiService apiService, Organization organization)
            : base(apiService)
        {
            _organization = organization;
            CollectionTitle = $"Programs - {organization.Name}";
            LoadDataAsync().ConfigureAwait(false);
        }

        protected override async Task LoadDataAsync()
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                var programs = await _apiService.GetProgramsForOrganizationAsync(_organization.Id);
                Items.Clear();
                foreach (var program in programs)
                {
                    Items.Add(program);
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error loading programs: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        protected override async Task AddAsync()
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                var newProgram = new Program
                {
                    Name = $"New Program {Items.Count + 1}",
                    Organization = _organization
                };

                var createdProgram = await _apiService.CreateProgramAsync(_organization.Id, newProgram);
                Items.Add(createdProgram);
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error creating program: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        protected override async Task EditAsync()
        {
            if (SelectedItem == null) return;

            var dialogViewModel = new EditProgramViewModel(_apiService, SelectedItem);
            var dialog = new EditProgramDialog { DataContext = dialogViewModel };

            dialogViewModel.ProgramUpdated += (s, updatedProgram) =>
            {
                var index = Items.IndexOf(SelectedItem);
                if (index != -1)
                {
                    Items[index] = updatedProgram;
                }
            };

            await DialogHost.Show(dialog);
        }
    }
}
====== END FILE: ./ViewModels/ProgramCollectionViewModel.cs ======

====== BEGIN FILE: ./ViewModels/ProgramViewModel.cs ======
﻿using System.Collections.ObjectModel;
using AdminClient.Models;
using AdminClient.Services;
using AdminClient.Views;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;

namespace AdminClient.ViewModels
{
    public partial class ProgramViewModel : ObservableObject
    {
        private readonly ApiService _apiService;

        [ObservableProperty]
        private Organization _organization;

        [ObservableProperty]
        private bool _isLoading;

        [ObservableProperty]
        private string _errorMessage;

        [ObservableProperty]
        private Models.Program _program;

        [ObservableProperty]
        private ObservableCollection<Program> _programs = new();

        [ObservableProperty]
        private Program _selectedProgram;

        [ObservableProperty]
        private ObservableCollection<OperatingUnit> _operatingUnits = new();

        [ObservableProperty]
        private OperatingUnit _selectedOperatingUnit;

        [ObservableProperty]
        private ObservableCollection<BundleDefinition> _bundles = new();

        public ProgramViewModel(ApiService apiService, Organization organization)
        {
            _apiService = apiService;
            _organization = organization;
            LoadDataAsync().ConfigureAwait(false);
        }

        private async Task LoadDataAsync()
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                if (Organization == null)
                {
                    ErrorMessage = "Organization reference is missing";
                    return;
                }

                // Load programs for the organization
                var orgPrograms = await _apiService.GetProgramsForOrganizationAsync(Organization.Id);
                Programs.Clear();
                foreach (var prog in orgPrograms)
                {
                    Programs.Add(prog);
                }

                // Set the current program or create initial if none exists
                Program = Programs.FirstOrDefault() ?? await CreateInitialProgramAsync();

                // Load operating units for the selected program
                if (Program != null)
                {
                    var units = await _apiService.GetOperatingUnitsForProgramAsync(Program.Id);
                    OperatingUnits.Clear();
                    foreach (var unit in units)
                    {
                        OperatingUnits.Add(unit);
                    }

                    // Load bundles
                    var bundles = await _apiService.GetBundleDefinitionsForProgramAsync(Program.Id);
                    Bundles.Clear();
                    foreach (var bundle in bundles)
                    {
                        Bundles.Add(bundle);
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error loading data: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        /// <summary>
        /// Persist an empty Program to DB
        /// </summary>
        /// <returns></returns>
        private async Task<Program> CreateInitialProgramAsync()
        {
            var newProgram = new Program
            {
                Name = $"{Organization.Name} Program",
                Organization = Organization
            };
            return await _apiService.CreateProgramAsync(Organization.Id, newProgram);
        }

        [RelayCommand]
        private async Task CreateOperatingUnit()
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                var newUnit = new OperatingUnit
                {
                    Name = "New Operating Unit",
                    Program = Program
                };

                var createdUnit = await _apiService.CreateOperatingUnitAsync(Program.Id, newUnit);
                OperatingUnits.Add(createdUnit);
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error creating operating unit: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task CreateBundleDefinition()
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                var newBundleDefinition = new BundleDefinition
                {
                    Name = "New Bundle Definition",
                    Program = Program,
                    Status = BundleStatus.DRAFT
                };

                var createdBundleDefinition = await _apiService.CreateBundleDefinitionAsync(Program.Id, newBundleDefinition);
                Bundles.Add(createdBundleDefinition);
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error creating bundle definition: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task CreateProgram()
        {
            try
            {
                IsLoading = true;
                ErrorMessage = null;

                var newProgram = new Program
                {
                    Name = $"New Program {Programs.Count + 1}",
                    Organization = Organization
                };

                var createdProgram = await _apiService.CreateProgramAsync(Organization.Id, newProgram);
                Programs.Add(createdProgram);
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error creating program: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task EditProgram(Program program)
        {
            if (program == null) return;

            var dialogViewModel = new EditProgramViewModel(_apiService, program);
            dialogViewModel.ProgramUpdated += (s, updatedProgram) =>
            {
                var index = Programs.IndexOf(program);
                if (index != -1)
                {
                    Programs[index] = updatedProgram;
                }
            };

            var dialog = new EditProgramDialog { DataContext = dialogViewModel };
            await MaterialDesignThemes.Wpf.DialogHost.Show(dialog);
        }
    }
}
====== END FILE: ./ViewModels/ProgramViewModel.cs ======

====== BEGIN FILE: ./ViewModels/TreeNodeViewModel.cs ======
﻿// NEW FILE: ViewModels/TreeNodeViewModel.cs
using AdminClient.Models;
using CommunityToolkit.Mvvm.ComponentModel;
using System.Collections.ObjectModel;

namespace AdminClient.ViewModels
{
    // This class represents a node in our domain tree
    public partial class TreeNodeViewModel : ObservableObject
    {
        [ObservableProperty]
        private string _name;

        [ObservableProperty]
        private TreeNodeViewModel _parent;

        [ObservableProperty]
        private ObservableCollection<TreeNodeViewModel> _children = new();

        [ObservableProperty]
        private TreeNodeType _nodeType;

        [ObservableProperty]
        private bool _isCollectionNode;

        // Reference to the actual domain model object
        public object ModelObject { get; }

        public TreeNodeViewModel(string name, TreeNodeType nodeType, object modelObject = null)
        {
            Name = name;
            NodeType = nodeType;
            ModelObject = modelObject;

            IsCollectionNode = nodeType is TreeNodeType.Root // Root == Organizations at present
                or TreeNodeType.Programs 
                or TreeNodeType.OperatingUnits 
                or TreeNodeType.BundleDefinitions 
                or TreeNodeType.ActivityDefinitions;

        }

        public void AddChild(TreeNodeViewModel child)
        {
            child.Parent = this;
            Children.Add(child);
        }
    }

    // Enum to identify node types in our domain
    public enum TreeNodeType
    {
        Root,
        Organization,
        Programs,
        Program,
        OperatingUnits,
        OperatingUnit,
        BundleDefinitions,
        BundleDefinition,
        ActivityDefinitions,
        ActivityDefinition
    }
}
====== END FILE: ./ViewModels/TreeNodeViewModel.cs ======

====== BEGIN FILE: ./Views/BaseCollectionView.xaml ======
﻿<UserControl x:Class="AdminClient.Views.BaseCollectionView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Collection Title -->
        <TextBlock Grid.Row="0" 
                   Text="{Binding CollectionTitle}"
                   Style="{StaticResource MaterialDesignHeadline6TextBlock}"
                   Margin="0,0,0,16"/>

        <!-- Error Message -->
        <TextBlock Grid.Row="0" 
                   Text="{Binding ErrorMessage}"
                   Foreground="Red"
                   Margin="0,0,0,10"
                   HorizontalAlignment="Right"
                   Visibility="{Binding ErrorMessage, Converter={StaticResource NullToVisibilityConverter}}"/>

        <!-- Actions Bar -->
        <StackPanel Grid.Row="1" 
                    Orientation="Horizontal" 
                    Margin="0,0,0,16">
            <Button Content="Add"
                    Command="{Binding AddCommand}"
                    Style="{StaticResource MaterialDesignFlatButton}"
                    Visibility="{Binding CanAdd, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <Button Content="Edit"
                    Command="{Binding EditCommand}"
                    Style="{StaticResource MaterialDesignOutlinedButton}"
                    Margin="8,0,0,0"
                    Visibility="{Binding CanEdit, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <Button Content="Delete"
                    Command="{Binding DeleteCommand}"
                    Style="{StaticResource MaterialDesignOutlinedButton}"
                    Margin="8,0,0,0"
                    Visibility="{Binding CanDelete, Converter={StaticResource BooleanToVisibilityConverter}}"/>
        </StackPanel>

        <!-- Content is provided by derived views -->
        <ContentPresenter Grid.Row="2" 
                         Content="{Binding ViewContent}"/>

        <!-- Loading Overlay -->
        <Grid Grid.RowSpan="3"
              Background="#80000000"
              Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}">
            <ProgressBar Style="{StaticResource MaterialDesignCircularProgressBar}"
                        IsIndeterminate="True"/>
        </Grid>
    </Grid>
</UserControl>

====== END FILE: ./Views/BaseCollectionView.xaml ======

====== BEGIN FILE: ./Views/BaseCollectionView.xaml.cs ======
﻿using System.Windows.Controls;

namespace AdminClient.Views
{
    /// <summary>
    /// Interaction logic for BaseCollectionView.xaml
    /// </summary>
    public partial class BaseCollectionView : UserControl
    {
        public BaseCollectionView()
        {
            InitializeComponent();
        }
    }
}

====== END FILE: ./Views/BaseCollectionView.xaml.cs ======

====== BEGIN FILE: ./Views/BundleDefinitionCollectionView.xaml ======
﻿<UserControl x:Class="AdminClient.Views.BundleDefinitionCollectionView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:AdminClient.Views"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <local:BaseCollectionView>
        <DataGrid ItemsSource="{Binding Items}" 
                 SelectedItem="{Binding SelectedItem}"
                 AutoGenerateColumns="False"
                 IsReadOnly="True"
                 materialDesign:DataGridAssist.CellPadding="13 8 8 8"
                 materialDesign:DataGridAssist.ColumnHeaderPadding="8">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Name" 
                                  Binding="{Binding Name}" 
                                  Width="*"/>
                <DataGridTextColumn Header="Status" 
                                  Binding="{Binding Status}" 
                                  Width="100"/>
                <DataGridTextColumn Header="Activities" 
                                  Binding="{Binding Activities.Count}" 
                                  Width="100"/>
                <DataGridTextColumn Header="Program" 
                                  Binding="{Binding Program.Name}" 
                                  Width="200"/>
            </DataGrid.Columns>
        </DataGrid>
    </local:BaseCollectionView>
</UserControl>

====== END FILE: ./Views/BundleDefinitionCollectionView.xaml ======

====== BEGIN FILE: ./Views/BundleDefinitionCollectionView.xaml.cs ======
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace AdminClient.Views
{
    /// <summary>
    /// Interaction logic for BundleDefinitionCollectionView.xaml
    /// </summary>
    public partial class BundleDefinitionCollectionView : UserControl
    {
        public BundleDefinitionCollectionView()
        {
            InitializeComponent();

            this.DataContextChanged += (s, e) =>
            {
                if (Content is BaseCollectionView baseView)
                {
                    baseView.DataContext = this.DataContext;
                }
            };
        }
    }
}

====== END FILE: ./Views/BundleDefinitionCollectionView.xaml.cs ======

====== BEGIN FILE: ./Views/BundleDefinitionView.xaml ======
﻿<UserControl x:Class="AdminClient.Views.BundleDefinitionView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:local="clr-namespace:AdminClient.Views"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Error Message -->
        <TextBlock Grid.Row="0" 
                   Text="{Binding ErrorMessage}"
                   Foreground="Red"
                   Margin="0,0,0,10"
                   Visibility="{Binding ErrorMessage, Converter={StaticResource NullToVisibilityConverter}}"/>

        <!-- Bundle Details -->
        <StackPanel Grid.Row="1" Margin="0,0,0,20">
            <TextBlock Text="{Binding BundleDefinition.Name}"
                       Style="{StaticResource MaterialDesignHeadline5TextBlock}"
                       Margin="0,0,0,10"/>
            <TextBlock Text="{Binding BundleDefinition.Program.Name}"
                       Style="{StaticResource MaterialDesignBody1TextBlock}"/>
            <TextBlock Text="{Binding BundleDefinition.Status}"
                       Style="{StaticResource MaterialDesignBody2TextBlock}"/>
        </StackPanel>

        <!-- Activities Header -->
        <TextBlock Grid.Row="2" 
                   Text="Activities"
                   Style="{StaticResource MaterialDesignHeadline6TextBlock}"
                   Margin="0,0,0,10"/>

        <!-- Activities List -->
        <DataGrid Grid.Row="3"
                  ItemsSource="{Binding Activities}"
                  AutoGenerateColumns="False"
                  IsReadOnly="True">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Name" 
                                  Binding="{Binding Name}"/>
                <DataGridTextColumn Header="Instructions" 
                                  Binding="{Binding Instructions}"/>
                <DataGridCheckBoxColumn Header="HCP Operated" 
                                      Binding="{Binding HcpOperated}"/>
            </DataGrid.Columns>
        </DataGrid>

        <!-- Loading Overlay -->
        <Grid Grid.Row="0" Grid.RowSpan="4"
              Background="#80000000"
              Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}">
            <ProgressBar Style="{StaticResource MaterialDesignCircularProgressBar}"
                        IsIndeterminate="True"/>
        </Grid>
    </Grid>
</UserControl>

====== END FILE: ./Views/BundleDefinitionView.xaml ======

====== BEGIN FILE: ./Views/BundleDefinitionView.xaml.cs ======
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace AdminClient.Views
{
    /// <summary>
    /// Interaction logic for BundleDefinitionView.xaml
    /// </summary>
    public partial class BundleDefinitionView : UserControl
    {
        public BundleDefinitionView()
        {
            InitializeComponent();
        }
    }
}

====== END FILE: ./Views/BundleDefinitionView.xaml.cs ======

====== BEGIN FILE: ./Views/Components/DetailFormBase.xaml ======
﻿<UserControl x:Class="AdminClient.Views.Components.DetailFormBase"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Error Message -->
        <TextBlock Grid.Row="0" 
                   Text="{Binding ErrorMessage}"
                   Foreground="Red"
                   Margin="0,0,0,10"
                   Visibility="{Binding ErrorMessage, Converter={StaticResource NullToVisibilityConverter}}"/>

        <!-- Form Content -->
        <ContentPresenter Grid.Row="1" 
                         Content="{Binding DetailContent, 
                         RelativeSource={RelativeSource AncestorType=UserControl}}"/>

        <!-- Action Buttons -->
        <StackPanel Grid.Row="2" 
                    Orientation="Horizontal" 
                    HorizontalAlignment="Right" 
                    VerticalAlignment="Bottom"
                    Margin="0,20,0,0">
            <Button Content="Save"
                    Command="{Binding SaveCommand}"
                    Style="{StaticResource MaterialDesignRaisedButton}"
                    Margin="0,0,8,0"/>
            <Button Content="Cancel"
                    Command="{Binding CancelCommand}"
                    Style="{StaticResource MaterialDesignOutlinedButton}"/>
        </StackPanel>

        <!-- Loading Overlay -->
        <Grid Grid.RowSpan="3"
              Background="#80000000"
              Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}">
            <ProgressBar Style="{StaticResource MaterialDesignCircularProgressBar}"
                        IsIndeterminate="True"/>
        </Grid>
    </Grid>
</UserControl>

====== END FILE: ./Views/Components/DetailFormBase.xaml ======

====== BEGIN FILE: ./Views/Components/DetailFormBase.xaml.cs ======
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace AdminClient.Views.Components
{
    /// <summary>
    /// Interaction logic for DetailFormBase.xaml
    /// </summary>
    public partial class DetailFormBase : UserControl
    {
        public DetailFormBase()
        {
            InitializeComponent();
        }

        public static readonly DependencyProperty DetailContentProperty = DependencyProperty.Register("FormContent", typeof(object), typeof(DetailFormBase));

        public object DetailContent
        {
            get => GetValue(DetailContentProperty);
            set => SetValue(DetailContentProperty, value);
        }
    }
}

====== END FILE: ./Views/Components/DetailFormBase.xaml.cs ======

====== BEGIN FILE: ./Views/CreateBundleDefinitionDialog.xaml ======
﻿<UserControl x:Class="AdminClient.Views.CreateBundleDefinitionDialog"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <materialDesign:Card Margin="16" Padding="16">
        <StackPanel>
            <TextBlock Text="Create Bundle Definition"
                     Style="{StaticResource MaterialDesignHeadline6TextBlock}"
                     Margin="0,0,0,16"/>

            <TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}"
                     materialDesign:HintAssist.Hint="Bundle Name"
                     Style="{StaticResource MaterialDesignOutlinedTextBox}"
                     Margin="0,8"/>

            <StackPanel Orientation="Horizontal" 
                      HorizontalAlignment="Right" 
                      Margin="0,16,0,0">
                <Button Style="{StaticResource MaterialDesignOutlinedButton}"
                        Command="{Binding CancelCommand}"
                        Content="CANCEL"
                        Margin="0,0,8,0"/>
                <Button Style="{StaticResource MaterialDesignRaisedDarkButton}"
                        Command="{Binding CreateCommand}"
                        Content="CREATE"/>
            </StackPanel>

            <!-- Loading Overlay -->
            <Grid Background="#80000000"
                  Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}">
                <ProgressBar Style="{StaticResource MaterialDesignCircularProgressBar}"
                            IsIndeterminate="True"/>
            </Grid>
        </StackPanel>
    </materialDesign:Card>
</UserControl>

====== END FILE: ./Views/CreateBundleDefinitionDialog.xaml ======

====== BEGIN FILE: ./Views/CreateBundleDefinitionDialog.xaml.cs ======
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace AdminClient.Views
{
    /// <summary>
    /// Interaction logic for CreateBundleDefinitionDialog.xaml
    /// </summary>
    public partial class CreateBundleDefinitionDialog : UserControl
    {
        public CreateBundleDefinitionDialog()
        {
            InitializeComponent();
        }
    }
}

====== END FILE: ./Views/CreateBundleDefinitionDialog.xaml.cs ======

====== BEGIN FILE: ./Views/EditOrganizationDialog.xaml ======
﻿<!-- EditOrganizationDialog.xaml -->
<UserControl x:Class="AdminClient.Views.EditOrganizationDialog"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:local="clr-namespace:AdminClient.Converters"
             Width="400">

    <UserControl.Resources>
        <local:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    </UserControl.Resources>
    
    <materialDesign:Card Margin="16" Padding="16">
        <StackPanel>
            <TextBlock Text="Edit Organization"
                     Style="{StaticResource MaterialDesignHeadline6TextBlock}"
                     Margin="0,0,0,16"/>

            <TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}"
                     materialDesign:HintAssist.Hint="Organization Name"
                     Style="{StaticResource MaterialDesignOutlinedTextBox}"
                     Margin="0,8"/>

            <!-- Add more fields as needed -->

            <StackPanel Orientation="Horizontal" 
                      HorizontalAlignment="Right" 
                      Margin="0,16,0,0">
                <Button Style="{StaticResource MaterialDesignOutlinedButton}"
                        Command="{Binding CancelCommand}"
                        Content="CANCEL"
                        Margin="0,0,8,0"/>
                <Button Style="{StaticResource MaterialDesignRaisedDarkButton}"
                        Command="{Binding SaveCommand}"
                        Content="SAVE"/>
            </StackPanel>

            <!-- Loading overlay -->
            <Grid Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}"
                  Panel.ZIndex="1000"
                  Background="#80000000">
                <ProgressBar Style="{StaticResource MaterialDesignCircularProgressBar}"
                            Value="0"
                            IsIndeterminate="True"/>
            </Grid>
        </StackPanel>
    </materialDesign:Card>
</UserControl>
====== END FILE: ./Views/EditOrganizationDialog.xaml ======

====== BEGIN FILE: ./Views/EditOrganizationDialog.xaml.cs ======
﻿using System.Windows.Controls;

namespace AdminClient.Views
{
    /// <summary>
    /// Interaction logic for EditOrganizationDialog.xaml
    /// </summary>
    public partial class EditOrganizationDialog : UserControl
    {
        public EditOrganizationDialog()
        {
            InitializeComponent();
        }
    }
}

====== END FILE: ./Views/EditOrganizationDialog.xaml.cs ======

====== BEGIN FILE: ./Views/EditProgramDialog.xaml ======
﻿<UserControl x:Class="AdminClient.Views.EditProgramDialog"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:local="clr-namespace:AdminClient.Converters"
             Width="400">

    <UserControl.Resources>
        <local:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    </UserControl.Resources>

    <materialDesign:Card Margin="16" Padding="16">
        <StackPanel>
            <TextBlock Text="Edit Program"
                     Style="{StaticResource MaterialDesignHeadline6TextBlock}"
                     Margin="0,0,0,16"/>

            <TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}"
                     materialDesign:HintAssist.Hint="Program Name"
                     Style="{StaticResource MaterialDesignOutlinedTextBox}"
                     Margin="0,8"/>

            <StackPanel Orientation="Horizontal" 
                      HorizontalAlignment="Right" 
                      Margin="0,16,0,0">
                <Button Style="{StaticResource MaterialDesignOutlinedButton}"
                        Command="{Binding CancelCommand}"
                        Content="CANCEL"
                        Margin="0,0,8,0"/>
                <Button Style="{StaticResource MaterialDesignRaisedDarkButton}"
                        Command="{Binding SaveCommand}"
                        Content="SAVE"/>
            </StackPanel>

            <!-- Loading overlay -->
            <Grid Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}"
                  Panel.ZIndex="1000"
                  Background="#80000000">
                <ProgressBar Style="{StaticResource MaterialDesignCircularProgressBar}"
                            Value="0"
                            IsIndeterminate="True"/>
            </Grid>
        </StackPanel>
    </materialDesign:Card>
</UserControl>
====== END FILE: ./Views/EditProgramDialog.xaml ======

====== BEGIN FILE: ./Views/EditProgramDialog.xaml.cs ======
﻿using System.Windows.Controls;

namespace AdminClient.Views
{
    /// <summary>
    /// Interaction logic for EditProgramDialog.xaml
    /// </summary>
    public partial class EditProgramDialog : UserControl
    {
        public EditProgramDialog()
        {
            InitializeComponent();
        }
    }
}

====== END FILE: ./Views/EditProgramDialog.xaml.cs ======

====== BEGIN FILE: ./Views/Forms/OrganizationDetailForm.xaml ======
﻿<UserControl x:Class="AdminClient.Views.Forms.OrganizationDetailForm"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:AdminClient.Views.Forms"
             xmlns:components="clr-namespace:AdminClient.Views.Components"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <components:DetailFormBase>
        <components:DetailFormBase.DetailContent>
            <StackPanel>
                <TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}"
                         materialDesign:HintAssist.Hint="Organization Name"
                         Style="{StaticResource MaterialDesignFilledTextBox}"
                         Margin="0,8"/>

                <TextBox Text="{Binding Description, UpdateSourceTrigger=PropertyChanged}"
                         materialDesign:HintAssist.Hint="Description"
                         Style="{StaticResource MaterialDesignFilledTextBox}"
                         Margin="0,8"/>
            </StackPanel>
        </components:DetailFormBase.DetailContent>
    </components:DetailFormBase>
</UserControl>

====== END FILE: ./Views/Forms/OrganizationDetailForm.xaml ======

====== BEGIN FILE: ./Views/Forms/OrganizationDetailForm.xaml.cs ======
﻿using System.Windows.Controls;

namespace AdminClient.Views.Forms
{
    /// <summary>
    /// Interaction logic for OrganizationDetailForm.xaml
    /// </summary>
    public partial class OrganizationDetailForm : UserControl
    {
        public OrganizationDetailForm()
        {
            InitializeComponent();
        }
    }
}

====== END FILE: ./Views/Forms/OrganizationDetailForm.xaml.cs ======

====== BEGIN FILE: ./Views/Forms/ProgramDetailForm.xaml ======
﻿<UserControl x:Class="AdminClient.Views.Forms.ProgramDetailForm"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:components="clr-namespace:AdminClient.Views.Components"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <components:DetailFormBase>
        <components:DetailFormBase.DetailContent>
            <StackPanel>
                <TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}"
                         materialDesign:HintAssist.Hint="Program Name"
                         Style="{StaticResource MaterialDesignFilledTextBox}"
                         Margin="0,8"/>

                <TextBox Text="{Binding Organization.Name}"
                         materialDesign:HintAssist.Hint="Organization"
                         Style="{StaticResource MaterialDesignFilledTextBox}"
                         IsEnabled="False"
                         Margin="0,8"/>

                <TextBox Text="{Binding Description, UpdateSourceTrigger=PropertyChanged}"
                         materialDesign:HintAssist.Hint="Description"
                         Style="{StaticResource MaterialDesignFilledTextBox}"
                         Margin="0,8"/>
            </StackPanel>
        </components:DetailFormBase.DetailContent>
    </components:DetailFormBase>
</UserControl>

====== END FILE: ./Views/Forms/ProgramDetailForm.xaml ======

====== BEGIN FILE: ./Views/Forms/ProgramDetailForm.xaml.cs ======
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace AdminClient.Views.Forms
{
    /// <summary>
    /// Interaction logic for ProgramDetailForm.xaml
    /// </summary>
    public partial class ProgramDetailForm : UserControl
    {
        public ProgramDetailForm()
        {
            InitializeComponent();
        }
    }
}

====== END FILE: ./Views/Forms/ProgramDetailForm.xaml.cs ======

====== BEGIN FILE: ./Views/LeafView.xaml ======
﻿<UserControl x:Class="AdminClient.Views.LeafView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:AdminClient.ViewModels"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <StackPanel Margin="20">
        <TextBlock Text="{Binding Name}"
                  Style="{StaticResource MaterialDesignHeadline5TextBlock}"/>
        <!-- More details will be added later -->
    </StackPanel>
</UserControl>

====== END FILE: ./Views/LeafView.xaml ======

====== BEGIN FILE: ./Views/LeafView.xaml.cs ======
﻿using System.Windows.Controls;

namespace AdminClient.Views
{
    /// <summary>
    /// Interaction logic for LeafView.xaml
    /// </summary>
    public partial class LeafView : UserControl
    {
        public LeafView()
        {
            InitializeComponent();
        }
    }
}

====== END FILE: ./Views/LeafView.xaml.cs ======

====== BEGIN FILE: ./Views/MainWindow.xaml ======
﻿<Window x:Class="AdminClient.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:ac="clr-namespace:AdminClient"
        xmlns:fa="http://schemas.awesome.incremented/wpf/xaml/fontawesome.sharp"
        xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
        xmlns:vm="clr-namespace:AdminClient.ViewModels"
        xmlns:views="clr-namespace:AdminClient.Views"
        xmlns:views1="clr-namespace:AdminClient.Views.Forms"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        Style="{StaticResource MaterialDesignWindow}"
        TextElement.FontWeight="Regular"
        TextElement.FontSize="13"
        TextOptions.TextFormattingMode="Ideal"
        TextOptions.TextRenderingMode="Auto"
        Title="MainWindow" Height="850" Width="1280">

    <Window.Resources>
        <DataTemplate DataType="{x:Type vm:OrganizationViewModel}">
            <views:OrganizationView />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:ProgramViewModel}">
            <views:ProgramView />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:OperatingUnitViewModel}">
            <views:OperatingUnitView />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:BundleDefinitionViewModel}">
            <views:BundleDefinitionView />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:OrganizationDetailViewModel}">
            <views1:OrganizationDetailForm />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:OperatingUnitDetailViewModel}">
            <views:OperatingUnitDetailForm />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:ProgramCollectionViewModel}">
            <views:ProgramCollectionView />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:OperatingUnitCollectionViewModel}">
            <views:OperatingUnitCollectionView />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:BundleDefinitionCollectionViewModel}">
            <views:BundleDefinitionCollectionView />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:OrganizationCollectionViewModel}">
            <views:OrganizationCollectionView />
        </DataTemplate>
    </Window.Resources>

    <materialDesign:DialogHost CloseOnClickAway="True">
        <Grid Background="WhiteSmoke">
            <DockPanel>
                <!-- Navigation Header -->
                <Border DockPanel.Dock="Top" 
                    Background="{StaticResource MaterialDesignPaper}" 
                    Effect="{StaticResource MaterialDesignShadowDepth2}">
                    <StackPanel Orientation="Horizontal" Margin="16,8">
                        <Button Content="← Back" 
                            Command="{Binding NavigateBackCommand}"
                            Visibility="Visible"
                            Style="{StaticResource MaterialDesignFlatButton}"
                            Margin="0,0,8,0"/>
                        <TextBlock Text="{Binding CurrentViewTitle}" 
                             Style="{StaticResource MaterialDesignHeadline6TextBlock}"
                             VerticalAlignment="Center"/>
                    </StackPanel>
                </Border>

                <Grid DockPanel.Dock="Bottom">
                    <!-- NEW: Column definitions -->
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="300" MinWidth="200"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <!-- NEW: TreeView Panel -->
                    <Border Grid.Column="0" 
                            Background="{StaticResource MaterialDesignPaper}"
                            Margin="16,8,8,16" 
                            Effect="{StaticResource MaterialDesignShadowDepth1}"
                            CornerRadius="20">
                        <Grid>
                            <TreeView ItemsSource="{Binding TreeNodes}"
                                SelectedItemChanged="TreeView_SelectedItemChanged"
                                Style="{StaticResource MaterialDesignTreeView}"
                                materialDesign:TreeViewAssist.ShowSelection="True">
                                <TreeView.Resources>
                                    <!-- Style for TreeViewItem to add proper spacing and hover effects -->
                                    <Style TargetType="TreeViewItem" BasedOn="{StaticResource MaterialDesignTreeViewItem}">
                                        <Setter Property="Padding" Value="8,4"/>
                                        <Setter Property="materialDesign:TreeViewAssist.ExpanderSize" Value="24"/>
                                    </Style>
                                </TreeView.Resources>
                                <TreeView.ItemTemplate>
                                    <HierarchicalDataTemplate ItemsSource="{Binding Children}">
                                        <StackPanel Orientation="Horizontal" Margin="4">
                                            <!-- Icon based on node type -->
                                            <materialDesign:PackIcon
                                                Kind="{Binding NodeType, Converter={StaticResource NodeTypeToIconConverter}}"
                                                Foreground="{Binding NodeType, Converter={StaticResource NodeTypeToColourConverter}}"
                                                Width="24"
                                                Height="24"
                                                VerticalAlignment="Center"
                                                Margin="0,0,8,0"/>
                                            <!-- Node name -->
                                            <TextBlock Text="{Binding Name}"
                              VerticalAlignment="Center"
                              Style="{StaticResource MaterialDesignBody1TextBlock}"/>
                                        </StackPanel>
                                    </HierarchicalDataTemplate>
                                </TreeView.ItemTemplate>
                            </TreeView>
                            <Grid Visibility="{Binding IsTreeLoading, Converter={StaticResource BooleanToVisibilityConverter}}"
                                Background="#80000000"
                                Panel.ZIndex="1000">
                                <ProgressBar 
                                    Style="{StaticResource MaterialDesignCircularProgressBar}"
                                    IsIndeterminate="True"/>
                            </Grid>
                        </Grid>
                    </Border>

                    <!-- NEW: Splitter -->
                    <GridSplitter Grid.Column="1" 
                                 Width="4" 
                                 HorizontalAlignment="Center"
                                 Margin="0,8,0,16"/>

                    <!-- NEW: Content Area (replaces existing Border) -->
                    <Border Grid.Column="2"
                            Background="WhiteSmoke" 
                            Margin="8,8,16,16" 
                            Effect="{StaticResource MaterialDesignShadowDepth1}"
                            CornerRadius="20">
                        <!-- Preserve existing content binding -->
                        <ContentControl Content="{Binding CurrentViewModel}"/>
                    </Border>
                </Grid>
            </DockPanel>
        </Grid>
    </materialDesign:DialogHost>
</Window>
====== END FILE: ./Views/MainWindow.xaml ======

====== BEGIN FILE: ./Views/MainWindow.xaml.cs ======
﻿using System.Windows;
using System.Windows.Input;
using AdminClient.ViewModels;

namespace AdminClient
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public static readonly RoutedUICommand AdministrateCommand = new RoutedUICommand(
            "Administrate", "Administrate", typeof(MainWindow));
        public static readonly RoutedUICommand TreeViewCommand = new RoutedUICommand(
            "TreeViewCommand", "TreeViewCommand", typeof(MainWindow));
        public MainWindow(MainWindowViewModel viewModel)
        {
            InitializeComponent();
            this.DataContext = viewModel;
        }

        private void TreeView_SelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)
        {
            if (DataContext is MainWindowViewModel viewModel &&
                e.NewValue is TreeNodeViewModel selectedNode)
            {
                // Convert to async call
                _ = Task.Run(() => viewModel.HandleTreeNodeSelectionAsync(selectedNode));
            }
        }
    }
}

====== END FILE: ./Views/MainWindow.xaml.cs ======

====== BEGIN FILE: ./Views/OperatingUnitCollectionView.xaml ======
﻿<UserControl x:Class="AdminClient.Views.OperatingUnitCollectionView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:AdminClient.Views"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <local:BaseCollectionView>
        <DataGrid ItemsSource="{Binding Items}" 
                  SelectedItem="{Binding SelectedItem}"
                  AutoGenerateColumns="False"
                  IsReadOnly="True">
            <DataGrid.Columns>
                <DataGridTextColumn Header="ID" 
                                  Binding="{Binding Id}" 
                                  Width="80"/>
                <DataGridTextColumn Header="Name" 
                                  Binding="{Binding Name}" 
                                  Width="*"/>
                <DataGridTextColumn Header="Program" 
                                  Binding="{Binding Program.Name}" 
                                  Width="200"/>
                <DataGridTemplateColumn Header="Actions" Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <Button Content="View HCPs"
                                        Command="{Binding DataContext.ViewHcpsCommand, 
                                            RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                        CommandParameter="{Binding}"
                                        Style="{StaticResource MaterialDesignOutlinedButton}"
                                        Margin="0,0,8,0"/>
                                <Button Content="View Subjects"
                                        Command="{Binding DataContext.ViewSubjectsCommand, 
                                            RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                        CommandParameter="{Binding}"
                                        Style="{StaticResource MaterialDesignOutlinedButton}"/>
                            </StackPanel>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
    </local:BaseCollectionView>
</UserControl>

====== END FILE: ./Views/OperatingUnitCollectionView.xaml ======

====== BEGIN FILE: ./Views/OperatingUnitCollectionView.xaml.cs ======
﻿using System.Windows.Controls;

namespace AdminClient.Views
{
    /// <summary>
    /// Interaction logic for OperatingUnitCollectionView.xaml
    /// </summary>
    public partial class OperatingUnitCollectionView : UserControl
    {
        public OperatingUnitCollectionView()
        {
            InitializeComponent();

            this.DataContextChanged += (s, e) =>
            {
                if (Content is BaseCollectionView baseView)
                {
                    baseView.DataContext = this.DataContext;
                }
            };
        }
    }
}

====== END FILE: ./Views/OperatingUnitCollectionView.xaml.cs ======

====== BEGIN FILE: ./Views/OperatingUnitDetailForm.xaml ======
﻿<UserControl x:Class="AdminClient.Views.OperatingUnitDetailForm"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:AdminClient.Views"
             xmlns:components="clr-namespace:AdminClient.Views.Components"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <components:DetailFormBase>
        <components:DetailFormBase.DetailContent>
            <StackPanel>
                <TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}"
                         materialDesign:HintAssist.Hint="Operating Unit Name"
                         Style="{StaticResource MaterialDesignFilledTextBox}"
                         Margin="0,8"/>

                <TextBox Text="{Binding Program.Name}"
                         materialDesign:HintAssist.Hint="Program"
                         Style="{StaticResource MaterialDesignFilledTextBox}"
                         IsEnabled="False"
                         Margin="0,8"/>

                <TextBox Text="{Binding Program.Organization.Name}"
                         materialDesign:HintAssist.Hint="Organization"
                         Style="{StaticResource MaterialDesignFilledTextBox}"
                         IsEnabled="False"
                         Margin="0,8"/>
            </StackPanel>
        </components:DetailFormBase.DetailContent>
    </components:DetailFormBase>
</UserControl>

====== END FILE: ./Views/OperatingUnitDetailForm.xaml ======

====== BEGIN FILE: ./Views/OperatingUnitDetailForm.xaml.cs ======
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace AdminClient.Views
{
    /// <summary>
    /// Interaction logic for OperatingUnitDetailForm.xaml
    /// </summary>
    public partial class OperatingUnitDetailForm : UserControl
    {
        public OperatingUnitDetailForm()
        {
            InitializeComponent();
        }
    }
}

====== END FILE: ./Views/OperatingUnitDetailForm.xaml.cs ======

====== BEGIN FILE: ./Views/OperatingUnitView.xaml ======
﻿<UserControl x:Class="AdminClient.Views.OperatingUnitView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:local="clr-namespace:AdminClient.Views"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Error Message -->
        <TextBlock Grid.Row="0" 
                   Text="{Binding ErrorMessage}"
                   Foreground="Red"
                   Margin="0,0,0,10"
                   Visibility="{Binding ErrorMessage, Converter={StaticResource NullToVisibilityConverter}}"/>

        <!-- Operating Unit Details -->
        <StackPanel Grid.Row="1" Margin="0,0,0,20">
            <TextBlock Text="{Binding OperatingUnit.Name}"
                       Style="{StaticResource MaterialDesignHeadline5TextBlock}"
                       Margin="0,0,0,10"/>
            <TextBlock Text="{Binding OperatingUnit.Program.Name}"
                       Style="{StaticResource MaterialDesignBody1TextBlock}"/>
        </StackPanel>

        <!-- Tabs for HCPs and Subjects -->
        <TabControl Grid.Row="2">
            <TabItem Header="HCPs">
                <DataGrid ItemsSource="{Binding Hcps}"
                         AutoGenerateColumns="False"
                         IsReadOnly="True">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Name" Binding="{Binding Name}"/>
                        <DataGridTextColumn Header="Email" Binding="{Binding Email}"/>
                    </DataGrid.Columns>
                </DataGrid>
            </TabItem>
            <TabItem Header="Subjects">
                <DataGrid ItemsSource="{Binding Subjects}"
                         AutoGenerateColumns="False"
                         IsReadOnly="True">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Name" Binding="{Binding Name}"/>
                        <DataGridTextColumn Header="Email" Binding="{Binding Email}"/>
                    </DataGrid.Columns>
                </DataGrid>
            </TabItem>
        </TabControl>

        <!-- Loading Overlay -->
        <Grid Grid.Row="0" Grid.RowSpan="3"
              Background="#80000000"
              Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}">
            <ProgressBar Style="{StaticResource MaterialDesignCircularProgressBar}"
                        IsIndeterminate="True"/>
        </Grid>
    </Grid>
</UserControl>

====== END FILE: ./Views/OperatingUnitView.xaml ======

====== BEGIN FILE: ./Views/OperatingUnitView.xaml.cs ======
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace AdminClient.Views
{
    /// <summary>
    /// Interaction logic for OperatingUnitView.xaml
    /// </summary>
    public partial class OperatingUnitView : UserControl
    {
        public OperatingUnitView()
        {
            InitializeComponent();
        }
    }
}

====== END FILE: ./Views/OperatingUnitView.xaml.cs ======

====== BEGIN FILE: ./Views/OrganizationCollectionView.xaml ======
﻿<UserControl x:Class="AdminClient.Views.OrganizationCollectionView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:AdminClient.Views"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">

    <local:BaseCollectionView>
        <DataGrid ItemsSource="{Binding Items}" 
                 SelectedItem="{Binding SelectedItem}"
                 AutoGenerateColumns="False"
                 IsReadOnly="True"
                 materialDesign:DataGridAssist.CellPadding="13 8 8 8"
                 materialDesign:DataGridAssist.ColumnHeaderPadding="8">
            <DataGrid.Columns>
                <DataGridTextColumn Header="ID" 
                                  Binding="{Binding Id}" 
                                  Width="100"/>
                <DataGridTextColumn Header="Name" 
                                  Binding="{Binding Name}" 
                                  Width="*"/>
            </DataGrid.Columns>
        </DataGrid>
    </local:BaseCollectionView>
</UserControl>
====== END FILE: ./Views/OrganizationCollectionView.xaml ======

====== BEGIN FILE: ./Views/OrganizationCollectionView.xaml.cs ======
﻿using System.Windows.Controls;

namespace AdminClient.Views
{
    public partial class OrganizationCollectionView : UserControl
    {
        public OrganizationCollectionView()
        {
            InitializeComponent();

            this.DataContextChanged += (s, e) =>
            {
                if (Content is BaseCollectionView baseView)
                {
                    baseView.DataContext = this.DataContext;
                }
            };
        }
    }
}
====== END FILE: ./Views/OrganizationCollectionView.xaml.cs ======

====== BEGIN FILE: ./Views/OrganizationView.xaml ======
﻿<?xml version="1.0" encoding="utf-8" ?>
<!-- Added XML declaration -->
<UserControl x:Class="AdminClient.Views.OrganizationView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:vm="clr-namespace:AdminClient.ViewModels"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:converters="clr-namespace:AdminClient.Converters"
             d:DataContext="{d:DesignInstance Type=vm:OrganizationViewModel}"
             mc:Ignorable="d">
    <!-- Added converters namespace -->
    <!-- Added materialDesign namespace -->

    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <!-- Added for error message -->
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Error Message - Added -->
        <TextBlock Grid.Row="0" 
                   Text="{Binding ErrorMessage}"
                   Foreground="Red"
                   Margin="0,0,0,10"
                   Visibility="{Binding ErrorMessage, Converter={StaticResource NullToVisibilityConverter}}"/>

        <!-- Command Bar - Moved to row 1 -->
        <ToolBar Grid.Row="1" Margin="0,0,0,10">
            <Button Content="Add Organization" 
                    Command="{Binding CreateOrganizationCommand}"
                    Style="{StaticResource MaterialDesignFlatButton}"/>
        </ToolBar>

        <!-- Organizations DataGrid - Moved to row 2 -->
        <DataGrid Grid.Row="2"
            ItemsSource="{Binding Organizations}" 
            SelectedItem="{Binding SelectedOrganization}"
            AutoGenerateColumns="False"
            IsReadOnly="True"
            VerticalAlignment="Stretch" 
            HorizontalAlignment="Stretch"
            Width="Auto"
            materialDesign:DataGridAssist.CellPadding="13 8 8 8"
            materialDesign:DataGridAssist.ColumnHeaderPadding="8">
            <DataGrid.InputBindings>
                <MouseBinding MouseAction="LeftDoubleClick" 
                             Command="{Binding EditOrganizationCommand}"
                              CommandParameter="{Binding SelectedOrganization}"/>
            </DataGrid.InputBindings>
            <DataGrid.Columns>
                <DataGridTextColumn Header="ID" 
                                  Binding="{Binding Id}" 
                                  Width="100"/>
                <DataGridTextColumn Header="Name" 
                                  Binding="{Binding Name}" 
                                  Width="*"/>
                <DataGridTemplateColumn Width="Auto" MinWidth="200">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <Button Content="Edit"
                                    Command="{Binding DataContext.EditOrganizationCommand, 
                                    RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                    CommandParameter="{Binding}"
                                    Style="{StaticResource MaterialDesignOutlinedButton}"/>
                                <Button Content="Programs"
                                    Command="{Binding DataContext.DrillDownCommand, 
                                    RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                    CommandParameter="{Binding}"
                                    Style="{StaticResource MaterialDesignRaisedButton}"/>
                            </StackPanel>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>

        <!-- Loading Indicator - Updated to span all rows -->
        <Grid Grid.Row="0" Grid.RowSpan="3" 
              Background="#80000000" 
              Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}"
              Panel.ZIndex="1000">
            <!-- Added to ensure overlay appears on top -->
            <ProgressBar IsIndeterminate="True" 
                        Width="100" Height="20"
                        VerticalAlignment="Center"
                        Style="{StaticResource MaterialDesignCircularProgressBar}"/>
        </Grid>
    </Grid>
</UserControl>
====== END FILE: ./Views/OrganizationView.xaml ======

====== BEGIN FILE: ./Views/OrganizationView.xaml.cs ======
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using AdminClient.Models;
using AdminClient.Services;
using AdminClient.ViewModels;

namespace AdminClient.Views
{
    /// <summary>
    /// Interaction logic for OrganizationView.xaml
    /// </summary>
    public partial class OrganizationView : UserControl
    {
        public OrganizationView()
        {
            InitializeComponent();
        }
    }
}

====== END FILE: ./Views/OrganizationView.xaml.cs ======

====== BEGIN FILE: ./Views/ProgramCollectionView.xaml ======
﻿<UserControl x:Class="AdminClient.Views.ProgramCollectionView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:AdminClient.Views"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">

    <local:BaseCollectionView>
        <DataGrid 
            ItemsSource="{Binding Items}" 
            SelectedItem="{Binding SelectedItem}"
            AutoGenerateColumns="False"
            IsReadOnly="True"
            materialDesign:DataGridAssist.CellPadding="13 8 8 8"
            materialDesign:DataGridAssist.ColumnHeaderPadding="8">
            <DataGrid.Columns>
                <DataGridTextColumn Header="ID" 
                                  Binding="{Binding Id}" 
                                  Width="100"/>
                <DataGridTextColumn Header="Name" 
                                  Binding="{Binding Name}" 
                                  Width="*"/>
                <DataGridTextColumn Header="Organization" 
                                  Binding="{Binding Organization.Name}" 
                                  Width="200"/>
            </DataGrid.Columns>
        </DataGrid>
    </local:BaseCollectionView>
</UserControl>

====== END FILE: ./Views/ProgramCollectionView.xaml ======

====== BEGIN FILE: ./Views/ProgramCollectionView.xaml.cs ======
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace AdminClient.Views
{
    /// <summary>
    /// Interaction logic for ProgramCollectionView.xaml
    /// </summary>
    public partial class ProgramCollectionView : UserControl
    {
        public ProgramCollectionView()
        {
            InitializeComponent();

            // Since we want the DataContext to flow through to our BaseCollectionView
            // and its contained DataGrid, we ensure proper binding inheritance
            this.DataContextChanged += (s, e) =>
            {
                // When our DataContext changes, we need to ensure the BaseCollectionView
                // and its children receive the updated context
                if (Content is BaseCollectionView baseView)
                {
                    baseView.DataContext = this.DataContext;
                }
            };
        }
    }
}

====== END FILE: ./Views/ProgramCollectionView.xaml.cs ======

====== BEGIN FILE: ./Views/ProgramView.xaml ======
﻿<UserControl x:Class="AdminClient.Views.ProgramView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vm="clr-namespace:AdminClient.ViewModels"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    d:DataContext="{d:DesignInstance Type=vm:ProgramViewModel}"
    mc:Ignorable="d">

    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Error Message -->
        <TextBlock Grid.Row="0" 
                   Text="{Binding ErrorMessage}"
                   Foreground="Red"
                   Margin="0,0,0,10"
                   Visibility="{Binding ErrorMessage, Converter={StaticResource NullToVisibilityConverter}}"/>

        <ToolBar Grid.Row="1" Margin="0,0,0,10">
            <Button Content="Add Program" 
            Command="{Binding CreateProgramCommand}"
            Style="{StaticResource MaterialDesignFlatButton}"/>
        </ToolBar>

        <!-- Main Content -->
        <DataGrid Grid.Row="2"
          ItemsSource="{Binding Programs}" 
          SelectedItem="{Binding SelectedProgram}"
          AutoGenerateColumns="False"
          IsReadOnly="True"
          VerticalAlignment="Stretch" 
          HorizontalAlignment="Stretch"
          materialDesign:DataGridAssist.CellPadding="13 8 8 8"
          materialDesign:DataGridAssist.ColumnHeaderPadding="8">
            <DataGrid.InputBindings>
                <MouseBinding MouseAction="LeftDoubleClick" 
                 Command="{Binding EditProgramCommand}"
                 CommandParameter="{Binding SelectedProgram}"/>
            </DataGrid.InputBindings>
            <DataGrid.Columns>
                <DataGridTextColumn Header="ID" 
                          Binding="{Binding Id}" 
                          Width="100"/>
                <DataGridTextColumn Header="Name" 
                          Binding="{Binding Name}" 
                          Width="*"/>
                <DataGridTemplateColumn Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Button Content="Edit"
                            Command="{Binding DataContext.EditProgramCommand, 
                                    RelativeSource={RelativeSource AncestorType=DataGrid}}"
                            CommandParameter="{Binding}"
                            Style="{StaticResource MaterialDesignOutlinedButton}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>

        <!-- Loading Indicator -->
        <Grid Grid.Row="0" Grid.RowSpan="3" 
              Background="#80000000" 
              Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}">
            <ProgressBar IsIndeterminate="True" 
                        Width="100" 
                        Height="20"
                        VerticalAlignment="Center"/>
        </Grid>
    </Grid>
</UserControl>
====== END FILE: ./Views/ProgramView.xaml ======

====== BEGIN FILE: ./Views/ProgramView.xaml.cs ======
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace AdminClient.Views
{
    /// <summary>
    /// Interaction logic for ProgramView.xaml
    /// </summary>
    public partial class ProgramView : UserControl
    {
        public ProgramView()
        {
            InitializeComponent();
        }
    }
}

====== END FILE: ./Views/ProgramView.xaml.cs ======

